/** * sekati.ui.CirclePreloader * @version 1.0.0 * @author jason m horwitz | sekati.com * Copyright (C) 2009  jason m horwitz, Sekat LLC. All Rights Reserved. * Released under the MIT License: http://www.opensource.org/licenses/mit-license.php */package sekati.ui {	import sekati.display.CoreSprite;	import sekati.ui.AbstractPreloader;	import flash.display.GradientType;	import flash.display.SpreadMethod;	import flash.display.Sprite;	import flash.events.Event;	import flash.geom.Matrix;			/**	 * CirclePreloader provides a circular dotted UI preloader element.	 */	public class CirclePreloader extends AbstractPreloader {		protected var _amount : int;		protected var _radius : Number;		protected var _dotRadius : Number;		protected var _colors : Array;		protected var _alphas : Array;		protected var _ratios : Array;		protected var container : Sprite;		protected var circlePattern : Sprite;		protected var gradientFill : Sprite;		/**		 * CirclePreloader Constructor		 * @param amount 	of dots to create.		 * @param radius 	of the preloader circle.		 * @param dotRadius of each individual dot.		 * @param colors 	array of gradient colors.		 * @param alphas 	array of gradient alphas.		 * @param ratios 	array of gradient ratios.		 */		public function CirclePreloader(amount : int = 36, radius : Number = 10, dotRadius : Number = 2, colors : Array = null, alphas : Array = null, ratios : Array = null) {			_amount = amount;			_radius = radius;			_dotRadius = dotRadius;			_colors = (colors) ? colors : [ 0xffffff, 0x000000 ];			_alphas = (alphas) ? alphas : [ 0, 1 ];			_ratios = (ratios) ? ratios : [ 0, 255 ];			super( );		}		/**		 * @inheritDoc		 */		override protected function configUI() : void {			super.configUI( );			var i : int = 0;						container = new Sprite( );			circlePattern = new Sprite( );			gradientFill = new Sprite( );			addChild( container );						// draw the circle			for(i; i < _amount ; i++) {				var circ : CoreSprite = new CoreSprite( );				circ.graphics.beginFill( 0, 1 );				circ.graphics.drawCircle( 0, 0, _dotRadius );				circ.graphics.endFill( );								var radianAngle : Number = ((360 / _amount) * i) * Math.PI / 180.0; // Convert degrees to radians.				circ.x = _radius * Math.cos( radianAngle );				circ.y = _radius * Math.sin( radianAngle );				circlePattern.addChild( circ );			}			addChild( circlePattern );						// draw the gradient fill			var mtrx : Matrix = new Matrix( );			var size : Number = (_radius * 2) + _radius;			var mtrxSize : Number = size + (size * 0.5);			mtrx.createGradientBox( mtrxSize, mtrxSize, 0, 0, 0 );			//mtrx.createGradientBox( 50, 50, 0, 0, 0 );			gradientFill.graphics.beginGradientFill( GradientType.LINEAR, _colors, _alphas, _ratios, mtrx, SpreadMethod.PAD );			gradientFill.graphics.drawRect( 0, 0, size, size );			gradientFill.graphics.endFill( );			gradientFill.x = gradientFill.y = size * -0.5;			// masking			gradientFill.mask = circlePattern;			container.addChild( gradientFill );					}		override protected function progress(e : Event = null) : void {			container.rotation += 15;		}	}}