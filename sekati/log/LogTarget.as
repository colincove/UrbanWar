/** * sekati.log.LogTarget * @version 1.2.6 * @author jason m horwitz | sekati.com * Copyright (C) 2008  jason m horwitz, Sekat LLC. All Rights Reserved. * Released under the MIT License: http://www.opensource.org/licenses/mit-license.php */package sekati.log {	import sekati.external.ExternalBase;	import sekati.utils.TypeEnforcer;		/**	 * LogTarget provides the different log targets (or "output modes") available to <code>Logger</code>	 */	public class LogTarget {		/**		 * No <code>Logger</code> output is sent; effectively the same as Logger.$.enabled = false;		 */		public static const NONE : uint = 0;		/**		 * <code>Logger</code> output is sent to the developers IDE output console (Flash/FDT/FlexBuilder console).		 */		public static const IDE : uint = 1;		/**		 * <code>Logger</code> output is sent to the browser javascript console via <code>ExternalInterface</code>.		 * @see http://getfirebug.com/		 */		public static const FIREBUG : uint = 2;		/**		 * <code>Logger</code> output is sent to both Console & Firebug and dispatches an addition <code>LogEvent</code> for plugin targets.		 * @see sekati.events.LogEvent		 */		public static const ALL : uint = 3;		/*** @private */		private static var isFirebugAvailable : Boolean = false;		/*** @private */		private static var isTargetConfigured : Boolean = false;		/**		 * Resolve the <code>Logger</code> target string.		 */		public static function resolveTarget(logTarget : String, verboseWarn : Boolean = false) : uint {			var level : String = logTarget.toUpperCase( );			switch(level) {				case "ALL":				case "3":				case "TRUE":					return ALL;					break;				case "FIREBUG":				case "2":					return FIREBUG;					break;									case "IDE":				case "1":					return IDE;					break;				case "NONE":				case "0":				case "FALSE":					return NONE;					break;				default:					if( verboseWarn ) {						Logger.$.error( LogTarget, "Ambiguous resolveTarget (" + logTarget + "): Defaulting to LogTarget.NONE; check your 'config.xml' <log> 'target' attribute." );					}					return NONE;			}		}		/**		 * A simple trace wrapper to facilitate <code>Logger</code> output to <code>IDE</code>		 * since the <code>trace</code> method is occupied as a <code>LogLevel</code>. 		 */		public static function updateIDE(msg : String) : void {			trace( msg );		}		/**		 * A wrapper to facilitate output to <a href="http://getfirebug.com/">Firebug</a> if it is available. 		 */		public static function updateFirebug(level : String, msg : String) : void {			if(!isTargetConfigured && ExternalBase.isReady) {				isTargetConfigured = true;				//isFirebugAvailable = ExternalBase.safeWrappedCall( "return typeof window.console == 'object' && typeof console.firebug == 'string'" );				// XXX - Now works with Chrome, Safari, etc!				isFirebugAvailable = ExternalBase.safeWrappedCall( "return typeof window.console == 'object'" );				if(isFirebugAvailable) {					ExternalBase.safeCall( "console.clear" );				}			}			if(isFirebugAvailable) {				ExternalBase.safeFunctionCall( "console." + level, msg );			}		}		/**		 * LogTarget Static Constructor		 */		public function LogTarget() {			TypeEnforcer.enforceStatic( LogTarget );		}	}}