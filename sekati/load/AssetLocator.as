/** * sekati.load.AssetLocator * @version 1.0.2 * @author jason m horwitz | sekati.com * Copyright (C) 2008  jason m horwitz, Sekat LLC. All Rights Reserved. * Released under the MIT License: http://www.opensource.org/licenses/mit-license.php */package sekati.load {	import sekati.log.Logger;	import sekati.utils.TypeEnforcer;		import flash.utils.Dictionary;			/**	 * AssetLocator provides a weak-referenced <code>Dictionary</code> of <i>all</i> <code>ILoader</code> instances.	 */	public class AssetLocator {		/*** @private */		private static var stack : Dictionary = new Dictionary( true );		/**		 * Register an asset for weak referencing by <code>AbstractLoader.url</code> property.		 * @param l 	the <code>AbstractLoader</code> instance to register.		 */		public static function register(l : AbstractLoader) : void {			stack[l.url] = l;		}		/**		 * Unregister an asset for by <code>AbstractLoader.url</code> property.		 * @param url 	the <code>AbstractLoader.url</code> identifier property.		 */		public static function unregister(url : String) : void {			stack[url] = null;		}		/**		 * Determine whether an <code>AbstractLoader</code> has been registered or not.		 */		public static function isRegistered(url : String) : Boolean {			return (stack[url] != null);		}		/**		 * Return the weak referenced <code>AbstractLoader</code> instance.		 * @param url 	the <code>AbstractLoader.url</code> identifier property.		 */		public static function getLoader(url : String) : AbstractLoader {			if(isRegistered( url )) {				return stack[url] as AbstractLoader;			} else {				Logger.$.error( AssetLocator, url + " is not registered." );				return null;			}		}		/**		 * AssetLocator Static Constructor		 */		public function AssetLocator() {			TypeEnforcer.enforceStatic( AssetLocator );		}	}}