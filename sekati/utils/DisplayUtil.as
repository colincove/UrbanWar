/** * sekati.utils.DisplayUtil * @version 1.0.8 * @author jason m horwitz | sekati.com * Copyright (C) 2008  jason m horwitz, Sekat LLC. All Rights Reserved. * Released under the MIT License: http://www.opensource.org/licenses/mit-license.php */package sekati.utils {	import sekati.display.Canvas;		import flash.geom.Point;		import sekati.utils.TypeEnforcer;	import flash.display.BlendMode;	import flash.display.DisplayObject;	import flash.display.DisplayObjectContainer;	import flash.display.Sprite;	import flash.geom.ColorTransform;	import flash.utils.getDefinitionByName;	import flash.utils.getQualifiedClassName;		/**	 * Static class wrapping various DisplayObject utilities.	 */	public class DisplayUtil {		/**		 * Instantiate a <code>Sprite</code> symbol from the library by string name.		 * @example <listing version="3.0">		 * var myBox : Sprite = DisplayUtil.getMovieFromLibrary( "Box" );		 * addChild( myBox );		 * </listing>		 */		public static function getMovieFromLibrary(className : String) : Sprite {			var LibSymbol : Class = getDefinitionByName( className ) as Class;			var libInstance : Sprite = new LibSymbol( ) as Sprite;			return libInstance;		}		/**		 * Return the next highest depth.		 * @example <listing version="3.0">;		 * 	this.setChildIndex( mySprite,  DisplayUtil.getNextHighestDepth( mySprite ) );		 * </listing>		 */		public static function getNextHighestDepth(o : DisplayObjectContainer) : uint {			return o.parent.numChildren - 1;		}		/**		 * Re-scales elements on the timeline to 100% and then resizes		 * to fit the previously stretched dimensions.		 * @param o			the stretched DisplayObject.		 * @param child 	if there are children of the movie, they are also stretched.		 */				public static function sizeContent(o : DisplayObject, child : DisplayObject = null) : void {			var w : Number = o.width;			var h : Number = o.height;			o.scaleX = o.scaleY = 1;			if (child) {				child.width = w;				child.height = h;			}		}		/**		 * Turns button behavior of a sprite on/off.		 */				public static function makeButton(o : Sprite, enabled : Boolean = true) : void {			o.buttonMode = enabled;			o.mouseChildren = !enabled;		}		/**		 * A bulk addChild		 * @param o 	destination object.		 * @param args 	array of DisplayObjects to add to the destination.		 */		public static function addChildren(o : DisplayObjectContainer, ...args) : void {			for (var i : int = 0; i < args.length ; i++) {				try {					o.addChild( args[i] );					} catch (e : Error) {					trace( "Error adding child during DisplayUtil.addChildren(): " + e.message );				}			}		}		/**		 * Removes all display children from a container.		 */		public static function removeChildren(o : DisplayObjectContainer) : void {			var numChildren : int = o.numChildren;			for (var i : int = 0; i < numChildren ; i++) {				try {					//since removing 0 shifts everything down, keep removing 0.					o.removeChildAt( 0 );				} catch (e : Error) {					trace( "Error removing child during DisplayUtil.removeAllChildren(): " + e.message );				}			}			if(o.numChildren > 0) {				throw new Error( "removeChildren() failed to function as expected; something went wrong!" );				}		}		/**		 * Change the color of a display object, works when setting the color property of the colorTransform does not,		 * for "stubborn" elements.		 */		public static function color(mc : DisplayObject, color : uint) : void {			var MASK : uint = 0xff;			var b : uint = color & MASK;			color >>= 8;			var g : uint = color & MASK;			color >>= 8;			var r : uint = color & MASK;						var cx : ColorTransform = mc.transform.colorTransform;			cx.redMultiplier = cx.greenMultiplier = cx.blueMultiplier = 0;			cx.redOffset = r;			cx.greenOffset = g;			cx.blueOffset = b;						mc.blendMode = BlendMode.LAYER;			mc.transform.colorTransform = cx;		}		/**		 * Unparents all arguments passed into the method.		 */		public static function unparentDisplayObjects(...args) : void {			for each (var obj:Object in args) {				if (obj is DisplayObject) {					var mc : DisplayObject = DisplayObject( obj );					if (mc.parent && mc.parent.contains( mc )) {						mc.parent.removeChild( mc );					}				}			}		}				/**		 * Reparent a display object while maintianing its visual continuity by syncing it's scale & rotation properties. 		 */		public static function reParentDisplayObject(object : DisplayObject, newParent : DisplayObjectContainer) : void {			var oldParent : DisplayObjectContainer = object.parent;			var newpoint : Point = new Point( );			newpoint.x = 0;			newpoint.y = 0;			newpoint = newParent.globalToLocal( object.localToGlobal( newpoint ) );			while (oldParent != Canvas.stage.root) {				object.rotation += oldParent.rotation;				object.scaleX *= oldParent.scaleX;				object.scaleY *= oldParent.scaleY;				oldParent = DisplayObjectContainer( oldParent.parent );			}			newParent.addChild( object );			while (newParent != Canvas.stage.root) {				object.rotation -= newParent.rotation;				object.scaleX /= newParent.scaleX;				object.scaleY /= newParent.scaleY;				newParent = DisplayObjectContainer( newParent.parent );			}			object.x = newpoint.x;			object.y = newpoint.y;		}				/**		 * Useful for templated items, returns the Class object that a DisplayObject instance is an instance of.		 * You can pass another class to ensure that the class is a subclass or implementor of a certain class or interface.		 */		public static function getClassFromInstance(instance : DisplayObject, requiredSubclass : Class = null) : Class {			var clazz : Class = null;			try {				var className : String = getQualifiedClassName( instance );				clazz = Class( getDefinitionByName( className ) );				if (requiredSubclass) {					if (!(instance is requiredSubclass)) clazz = null;				}			} catch (error : ReferenceError) {				return null;			}			return clazz;		}		/**		 * DisplayUtil Static Constructor		 */		public function DisplayUtil() {			TypeEnforcer.enforceStatic( DisplayUtil );		}	}}