/** * sekati.display.LiquidSprite * @version 1.2.1 * @author jason m horwitz | sekati.com * Copyright (C) 2008  jason m horwitz, Sekat LLC. All Rights Reserved. * Released under the MIT License: http://www.opensource.org/licenses/mit-license.php */package sekati.display {	import flash.events.Event;	import sekati.display.CoreSprite;	import sekati.display.StageDisplay;	import sekati.events.StageEvent;		/**	 * LiquidSprite provides a visual building block which is ready to respond to	 * <code>StageEvent</code>'s such as <code>RESIZE, RESIZE_COMPLETE, & FULLSCREEN</code>.	 * 	 * <p>Use LiquidClip for frame-based assets; else LiquidSprite is most appropriate.</p>	 */	public class LiquidSprite extends CoreSprite {		/**		 * LiquidSprite Constructor		 */		public function LiquidSprite() {			super( );		}		/**		 * @inheritDoc		 */		override protected function onStage(e : Event = null) : void {			configListeners( true );		}		/**		 * @inheritDoc		 */		override protected function offStage(e : Event = null) : void {			configListeners( false );		}		/**		 * Event listener management.		 * @param isAdd 	if <code>true</code> add the listeners, if <code>false</code> remove them.		 */		protected function configListeners(isAdd : Boolean = false) : void {			var listenerMethod : String = (isAdd) ? 'addEventListener' : 'removeEventListener';			StageDisplay.$[listenerMethod]( StageEvent.RESIZE, resize );			StageDisplay.$[listenerMethod]( StageEvent.RESIZE_COMPLETE, resizeComplete );			StageDisplay.$[listenerMethod]( StageEvent.FULLSCREEN, fullscreen );		}				/**		 * Stub: fires when <code>StageDisplay</code> dispatches a <code>RESIZE</code> event.		 */		protected function resize(e : StageEvent = null) : void {		}		/**		 * Stub: fires when <code>StageDisplay</code> dispatches a <code>RESIZE_COMPLETE</code> event.		 */		protected function resizeComplete(e : StageEvent = null) : void {		}		/**		 * Stub: fires when <code>StageDisplay</code> dispatches a <code>FULLSCREEN</code> event.		 */		protected function fullscreen(e : StageEvent = null) : void {		}		/**		 * @inheritDoc		 */		override public function destroy() : void {			configListeners( false );			super.destroy( );		}		/**		 * Enabled property defines whether liquid eventing is available or not.		 */		override public function set enabled(b : Boolean) : void {			super.enabled = b;			configListeners( b );		}					}}