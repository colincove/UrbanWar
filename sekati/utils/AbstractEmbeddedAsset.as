/** * sekati.utils.AbstractEmbeddedAsset * @version 1.0.0 * @author jason m horwitz | sekati.com * Copyright (C) 2008  jason m horwitz, Sekat LLC. All Rights Reserved. * Released under the MIT License: http://www.opensource.org/licenses/mit-license.php */package sekati.utils {	import flash.utils.ByteArray;			/**	 * AbstractEmbeddedAsset	 */	public class AbstractEmbeddedAsset {		//[Embed(source="/../deploy/xml/data.xml",  mimeType="application/octet-stream")] 		protected var EmbeddedAsset : Class;		protected var AssetType : Class;		protected var asset : *;		/**		 * AbstractEmbeddedAsset Constructor		 * 		 * @example <listing version="3.0">		 * 	package {		 * 		public class MyAsset extends AbstractEmbeddedAsset {		 * 			[Embed(source="/../deploy/xml/test.xml",  mimeType="application/octet-stream")]		 * 			protected const EmbeddedAsset : Class;		 * 					 * 			public function MyAsset(assetType : Class){		 * 				super( );		 * 			}		 * 		}		 * 	}		 * 			 * 	var test : XML = XML(new MyAsset());		 * 	trace(test.toXMLString());		 * </listing>		 */		public function AbstractEmbeddedAsset(assetType : Class) {			TypeEnforcer.enforceAbstract( this, AbstractEmbeddedAsset );			AssetType = assetType;			var byteArray : ByteArray = new EmbeddedAsset( ) as ByteArray;			asset = new AssetType( byteArray.readUTFBytes( byteArray.length ) );		}		/**		 * The asset contents.		 */		public function get content() : * {			return asset;		}		/**		 * The asset Class type.		 */		public function get type() : Class {			return AssetType;		}	}}