/** * sekati.draw.GradientRect * @version 1.0.1 * @author jason m horwitz | sekati.com * Copyright (C) 2009  jason m horwitz, Sekat LLC. All Rights Reserved. * Released under the MIT License: http://www.opensource.org/licenses/mit-license.php */package sekati.draw {	import flash.display.Shape;	import flash.geom.Matrix;		/**	 * GradientRect provides a gradient rectangle shape. 	 * 	 * <p><i>Note</i>: This class does not implement <code>ITweenableDrawing</code> and functions 	 * differently than <code>Rect</code> and other <code>draw</code> package classes.</p>	 */	public class GradientRect extends Shape implements ITweenableDrawing {				protected var _width : Number;		protected var _height : Number;		protected var _colors : Array;		protected var _alphas : Array;		protected var _ratios : Array;		protected var _matrix : Matrix;		protected var _type : String;		protected var _spread : String;		protected var _interpolation : String;		protected var _isVerticalGradient : Boolean;		protected var _focalPointRatio : Number;		/**		 * GradientRect Constructor		 * @example <listing version="3.0">		 * var rect : GradientRect = new GradientRect( 320, 240, [ 0xffcc00, 0xff00ff ], [ 1, 0.75 ], [ 0, 255 ] );		 * addChild( rect );		 * </listing>		 */		public function GradientRect(width : Number, height : Number, colors : Array, alphas : Array, ratios : Array, isVerticalGradient : Boolean = true, type : String = 'linear', spread : String = 'pad',  interpolation : String = 'rgb', focalPointRatio : Number = 0) {			_width = width;			_height = height;			_colors = colors;			_alphas = alphas;			_ratios = ratios;			_isVerticalGradient = isVerticalGradient;			_type = type;			_spread = spread;			_interpolation = interpolation;			_focalPointRatio = focalPointRatio;						if(_colors.length <= 1 || _ratios.length <= 1 || _alphas.length <= 1) {				throw new ArgumentError( "GradientRect Constructor Argument Error: colors, ratios & alphas arrays must contain 2 or more values." );			}			draw( );							}		/**		 * @inheritDoc		 */		public function draw() : void {			_matrix = new Matrix( );			var matrixRotation : Number = (!_isVerticalGradient) ? 0 : ((Math.PI / 180) * 90);			_matrix.createGradientBox( _width, _height, matrixRotation );			graphics.beginGradientFill( _type, _colors, _alphas, _ratios, _matrix, _spread, _interpolation, _focalPointRatio );			graphics.drawRect( 0, 0, _width, _height );			graphics.endFill( );		}		/**		 * @inheritDoc		 */				public function redraw() : void {			clear( );			draw( );					}		/**		 * @inheritDoc		 */				public function clear() : void {			graphics.clear( );						}		/**		 * The gradient color array.		 */		public function get colors() : Array {			return _colors;		}		/*** @private */		public function set colors(colors : Array) : void {			_colors = colors;		}		/**		 * The gradient alpha array.		 */		public function get alphas() : Array {			return _alphas;		}		/*** @private */			public function set alphas(alphas : Array) : void {			_alphas = alphas;		}		/**		 * The gradient ratio array.		 */		public function get ratios() : Array {			return _ratios;		}		/*** @private */		public function set ratios(ratios : Array) : void {			_ratios = ratios;		}		/**		 * The gradient matrix.		 * @see flash.geom.Matrix		 */		public function get matrix() : Matrix {			return _matrix;		}		/*** @private */		public function set matrix(matrix : Matrix) : void {			_matrix = matrix;		}		/**		 * The gradient type		 * @see flash.display.GradientType		 */		public function get type() : String {			return _type;		}		/*** @private */		public function set type(type : String) : void {			_type = type;		}		/**		 * The gradient spread method.		 * @see flash.display.SpreadMethod		 */		public function get spread() : String {			return _spread;		}		/*** @private */			public function set spread(spread : String) : void {			_spread = spread;		}		/**		 * The gradient interpolation method.		 * @see flash.display.InterpolationMethod		 */		public function get interpolation() : String {			return _interpolation;		}		/*** @private */					public function set interpolation(interpolation : String) : void {			_interpolation = interpolation;		}				/**		 * Determines whether the gradient is vertical, <code>true</code> or horizontal, <code>false</code>.		 */		public function get isVerticalGradient() : Boolean {			return _isVerticalGradient;		}		/*** @private */			public function set isVerticalGradient(isVerticalGradient : Boolean) : void {			_isVerticalGradient = isVerticalGradient;		}				/**		 * The gradient focal point ratio.		 */		public function get focalPointRatio() : Number {			return _focalPointRatio;		}		/*** @private */			public function set focalPointRatio(focalPointRatio : Number) : void {			_focalPointRatio = focalPointRatio;		}			}}