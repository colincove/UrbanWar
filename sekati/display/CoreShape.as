/** * sekati.display.CoreShape * @version 1.0.1 * @author jason m horwitz | sekati.com * Copyright (C) 2009  jason m horwitz, Sekat LLC. All Rights Reserved. * Released under the MIT License: http://www.opensource.org/licenses/mit-license.php */package sekati.display {	import sekati.log.Logger;	import sekati.reflect.Stringifier;		import flash.display.Shape;	import flash.events.Event;		/**	 * CoreShape is a foundational <code>Shape</code> class for code-driven <code>Graphic DisplayObject</code>'s. 	 */	public class CoreShape extends Shape {
		/*** @private */		protected var _this : Shape;				/*** @private */		protected var _enabled : Boolean;					/*** @private */		protected var _liveUpdate : Boolean;			/**		 * CoreShape Constructor		 */		public function CoreShape() {			_this = this;			_enabled = true;			_liveUpdate = false;			addEventListener( Event.ADDED_TO_STAGE, onStage, false, 0, true );			addEventListener( Event.REMOVED_FROM_STAGE, offStage, false, 0, true );					}		/**		 * Stub: Shape has been added to stage.		 */		protected function onStage(e : Event = null) : void {			//Logger.$.trace( _this, "added to stage." );		}		/**		 * Stub: Shape has been removed from stage.		 */		protected function offStage(e : Event = null) : void {			//Logger.$.trace( _this, "removed from stage." );		}		/**		 * Request a redraw, use for deferred rendering.		 */		protected function invalidate() : void {			if(stage != null) {				stage.invalidate( );						} else {				Logger.$.warn( _this, "invalidate() should only be called while the CoreShape is on the DisplayList." );			}		}			/**		 * Clean up after thy self.		 */		public function destroy() : void {			graphics.clear( );			removeEventListener( Event.ADDED_TO_STAGE, onStage );			removeEventListener( Event.REMOVED_FROM_STAGE, offStage );		}		/**		 * Return reflective output.		 * @return String		 */		override public function toString() : String {			return Stringifier.stringify( _this );		}		/**		 * The <code>scale</code> value.		 */		public function get scale() : Number {			return (scaleX >= scaleY) ? scaleX : scaleY;		}		/**		 * @private		 */		public function set scale(value : Number) : void {			scaleX = scaleY = value;		}		/**		 * <code>Boolean</code> stub property which subclasses implement to control core 		 * behavor availability such as interactivity, liquidity, drag-drop functionality.		 */		public function get enabled() : Boolean {			return _enabled;		}			/*** @private */		public function set enabled(b : Boolean) : void {			_enabled = b;		}		/**		 * liveUpdate determines whether the graphic will be redrawn		 */		public function get liveUpdate() : Boolean {			return _liveUpdate;		}		/*** @private */		public function set liveUpdate(b : Boolean) : void {			_liveUpdate = b;		}											}}