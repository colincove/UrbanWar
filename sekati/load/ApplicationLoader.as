/** * sekati.load.ApplicationLoader * @version 1.2.3 * @author jason m horwitz | sekati.com * Copyright (C) 2008  jason m horwitz, Sekat LLC. All Rights Reserved. * Released under the MIT License: http://www.opensource.org/licenses/mit-license.php */package sekati.load {	import sekati.events.BootstrapEvent;	import sekati.events.FramePulse;	import sekati.log.Logger;		import flash.display.DisplayObject;	import flash.display.Stage;	import flash.events.Event;	import flash.events.EventDispatcher;		/**	 * ApplicationLoader provides a baseline <i>invisible</i> preloader facility for <code>Canvas</code> based Application SWF 	 * files that implement the core API (<code>Document</code> or <code>DocumentPreloader</code>). 	 * 	 * <p>The loader insures that the SWF has been fully loaded by the client before initialization. Once loading has completed 	 * the <code>BootstrapEvent.APP_LOAD</code> event is invoked.</p>	 * 	 * <p><b>Note:</b> This is <i>not a visual preloader</i>. Rather, it is added as a preventative measure to insure smooth	 * execution and initialization of the SWF. If an external visual preloader is necessary for your API based application 	 * you should subclass <code>DocumentPreloader</code>.</p>	 * 	 * @example <listing version="3.0">	 * 	preloader = new ApplicationLoader( this );	 * 	preloader.addEventListener( BootstrapEvent.APP_LOAD, applicationLoadHandler );	 * 		 * 	private function applicationLoadHandler( e : BootstrapEvent ) : void {	 * 		preloader.removeEventListener( BootstrapEvent.APP_LOAD, applicationLoadHandler );	 * 		trace( "application loaded!" );	 * 	}	 * </listing>	 * @see sekati.display.DocumentPreloader	 * @see sekati.display.Document	 * @see sekati.display.Canvas	 */	public class ApplicationLoader extends EventDispatcher {		/*** @private */		protected var _loaded : uint;				/*** @private */		protected var _total : uint;				/*** @private */		private var _stage : Stage;				/**		 * ApplicationLoader Constructor		 * @param target 	document class instance being loaded.		 */		public function ApplicationLoader(stage : Stage) {			_stage = stage;			load( );		}		/**		 * Begin checking the SWF load status.		 */		public function load() : void {			FramePulse.$.addFrameListener( enterFrame );		}		/**		 * Frame-based load handler; dispatches <code>BootstrapEvent.APP_LOAD</code> on completion.		 */		protected function enterFrame(e : Event) : void {			_loaded = Math.round( _stage.loaderInfo.bytesLoaded );			_total = Math.round( _stage.loaderInfo.bytesTotal );			//Logger.$.trace( this, "ApplicationLoader ( " + _stage + " ): " + _loaded + " / " + _total + " @ " + percent + "%" );			if (bytesLoaded >= bytesTotal && bytesTotal > 0 && percent >= 1) {				Logger.$.info( this, "	@@@ - Loaded Successfully ..." );				FramePulse.$.removeFrameListener( enterFrame );				dispatchEvent( new BootstrapEvent( BootstrapEvent.APP_LOAD ) );			}		}		/**		 * The number of loaded bytes.		 */		public function get bytesLoaded() : uint {			return isNaN( _loaded ) ? 0 : _loaded;			}		/**		 * The number of total bytes.		 */		public function get bytesTotal() : uint {			return isNaN( _total ) ? 0 : _total;			}		/**		 * The (<i>1 based</i>) percent loaded.		 */		public function get percent() : Number {			return (bytesLoaded / bytesTotal);			}	}}