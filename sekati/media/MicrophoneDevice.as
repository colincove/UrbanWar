/** * sekati.media.MicrophoneDevice * @version 1.0.2 * @author jason m horwitz | sekati.com * Copyright (C) 2009  jason m horwitz, Sekat LLC. All Rights Reserved. * Released under the MIT License: http://www.opensource.org/licenses/mit-license.php */package sekati.media {	import sekati.events.DeviceEvent;	import sekati.log.Logger;	import flash.events.ActivityEvent;	import flash.events.EventDispatcher;	import flash.events.StatusEvent;	import flash.media.Microphone;	import flash.media.SoundTransform;	import flash.system.Security;	import flash.system.SecurityPanel;			/**	 * MicrophoneDevice provides a <code>Microphone</code> control to the API.	 * @see sekati.events.DeviceEvent	 * @see http://livedocs.adobe.com/flash/9.0/ActionScriptLangRefV3/flash/media/Microphone.html	 */	public class MicrophoneDevice extends EventDispatcher implements IDevice {		/*** @private */		protected var _device : Microphone;		/*** @private */		protected var _silenceLevel : int;		/*** @private */		protected var _rate : int;		/*** @private */		protected var _gain : int;		/*** @private */		protected var _timeout : int;		/*** @private */		protected var _loopback : Boolean;		/*** @private */		protected var _useEchoSuppression : Boolean;		/**		 * MicrophoneDevice Constructor		 * @param silenceLevel 			The amount of sound required to dispatch the <code>activity<code> event. Ranges from <code>0 - 100</code> (Flash Player defaults to <code>50</code>, however <code>25</code> is more accurate for average sound. Note: the lower the value the greater the bandwidth usage in a <code>NetStream</code>).		 * @param rate 					The rate the microphone captures sound, in <code>kHz</code>. The allowed values are any of the following, provided your sound device supports them: <code>5, 8, 11, 22, 44</code>. 		 * @param gain 					The amount to multiply the signal before transmitting it. A range between <code>0 - 100</code> is accepted. 		 * @param timeout 				How many milliseconds must elapse without activity before a <code>activity</code> event is dispatched.		 * @param loopback 				Whether to routes audio captured by a microphone to the local speakers (<code>true</code>) or not (<code>false</code>). 		 * @param useEchoSuppression 	Whether to use the echo suppression feature of the audio codec (<code>true</code>) or not (<code>false</code>).		 * @param autoPoll 				Determines whether the device is auto-polled for (<code>true</code>) or not (<code>false</code>).		 */		public function MicrophoneDevice(silenceLevel : int = 50, rate : int = 8, gain : int = 50, timeout : int = 2000, loopback : Boolean = true, useEchoSuppression : Boolean = true, autoPoll : Boolean = true) {			_silenceLevel = silenceLevel;			_rate = rate;			_gain = gain;			_timeout = timeout;			_loopback = loopback;			_useEchoSuppression = useEchoSuppression;			if(autoPoll) {				pollDevice( );			}		}		/**		 * @inheritDoc		 */		public function destroy() : void {			_device.removeEventListener( StatusEvent.STATUS, statusHandler );			_device.removeEventListener( ActivityEvent.ACTIVITY, activityHandler );		}		// DEVICE CONNECTORS				/**		 * Poll the <code>Microphone</code> device for a connection.		 */		public function pollDevice() : void {			_device = Microphone.getMicrophone( );						if(_device != null) {				dispatchEvent( new DeviceEvent( DeviceEvent.DEVICE_AVAILABLE ) );				connectDevice( );			} else {				if(devices.length > 0) {					dispatchEvent( new DeviceEvent( DeviceEvent.DEVICE_BUSY ) );					promptDevice( );				} else {					dispatchEvent( new DeviceEvent( DeviceEvent.DEVICE_UNAVAILABLE ) );				}			}		}		/**		 * Connect to the <code>Microphone</code> to a <code>Video</code> stream.		 */		protected function connectDevice() : void {			_device.addEventListener( StatusEvent.STATUS, statusHandler, false, 0, true );			_device.addEventListener( ActivityEvent.ACTIVITY, activityHandler, false, 0, true );						_device.setLoopBack( _loopback );			_device.setUseEchoSuppression( _useEchoSuppression );			_device.setSilenceLevel( _silenceLevel, _timeout );			_device.rate = _rate;			_device.gain = _gain;		}		/**		 * Graceful degradation: a <code>Camera</code> is available but the user either clicked <i>deny</i> or the device is busy.		 */		protected function promptDevice() : void {			Security.showSettings( SecurityPanel.MICROPHONE );		}		// EVENT HANDLERS		/**		 * Responds to camera activity.		 */		protected function activityHandler(e : ActivityEvent) : void {			//Logger.$.notice( this, "activating: " + e.activating + ", activityLevel: " + _device.activityLevel );			dispatchEvent( new DeviceEvent( DeviceEvent.DEVICE_ACTIVITY, e.activating, _device.activityLevel ) );		}		/**		 * Respond to camera status.		 */		protected function statusHandler(e : StatusEvent) : void {			//Logger.$.notice( this, "status: " + e.code );			switch (e.code) {				case "Microphone.Muted":					// user clicked deny					Logger.$.warn( this, "Microphone device muted." );					dispatchEvent( new DeviceEvent( DeviceEvent.DEVICE_MUTE ) );					break;				case "Microphone.Unmuted":					// user clicked accept					Logger.$.notice( this, "Microphone device unmuted." );					dispatchEvent( new DeviceEvent( DeviceEvent.DEVICE_UNMUTE ) );					break;			}		}				// GETTABLE DEVICE PROPERTIES					/**		 * The list of names of the available <code>Microphone</code> device drivers.		 */		public function get devices() : Array {			return Microphone.names;		}		/**		 * The <i>index</i> of the currently connected <code>Microphone</code> device driver.		 */		public function get deviceIndex() : int {			return _device.index;		}		/**		 * The <i>name</i> of the currently connected <code>Microphone</code> device driver.		 */		public function get deviceName() : String {			return _device.name;		}		/**		 * The amount of activity the device is detecting. Ranges from <code>0</code> (no activity 		 * detected) to <code>100</code> (a large amount of activity detected).		 */		public function get activityLevel() : Number {			return _device.activityLevel;		}		/**		 * Indicates whether the user has denied access to the device (<code>true</code>) or allowed 		 * access (<code>false</code>) in the Flash Player Privacy dialog box.		 */		public function get muted() : Boolean {			return _device.muted;		}		// SETTABLE DEVICE PROPERTIES				/**		 * The rate the microphone captures sound, in <code>kHz</code>. The allowed values are any of 		 * the following, provided your sound device supports them: <code>5, 8, 11, 22, 44</code>. 		 */		public function get rate() : int {			return _rate;		}		/*** @private */		public function set rate(rate : int) : void {			_rate = rate;			_device.rate = _rate;		}				/**		 * The amount to multiply the signal before transmitting it. A range between <code>0 - 100</code> is accepted. 		 */		public function get gain() : int {			return _gain;		}		/*** @private */		public function set gain(gain : int) : void {			_gain = gain;			_device.gain = gain;		}				/**		 * Whether to use the echo suppression feature of the audio codec (<code>true</code>) or not (<code>false</code>).		 */		public function get useEchoSuppression() : Boolean {			return _useEchoSuppression;		}		/*** @private */		public function set useEchoSuppression(useEchoSuppression : Boolean) : void {			_useEchoSuppression = useEchoSuppression;			_device.setUseEchoSuppression( _useEchoSuppression );		}				/**		 * Whether to routes audio captured by a microphone to the local speakers (<code>true</code>) or not (<code>false</code>). 		 */		public function get loopback() : Boolean {			return _loopback;		}		/*** @private */		public function set loopback(loopback : Boolean) : void {			_loopback = loopback;			_device.setLoopBack( _loopback );		}		/**		 * How many milliseconds must elapse without activity before a <code>activity</code> event is dispatched.		 */		public function get timeout() : int {			return _timeout;		}		/*** @private */		public function set timeout(timeout : int) : void {			_timeout = timeout;			_device.setSilenceLevel( _silenceLevel, _timeout );		}		/**		 * The amount of sound required to dispatch the <code>activity<code> event. Ranges from <code>0 - 100</code> 		 * (Flash Player defaults to <code>50</code>, however <code>25</code> is more accurate for average sound. 		 * Note: the lower the value the greater the bandwidth usage in a <code>NetStream</code>).		 */		public function get silenceLevel() : int {			return _silenceLevel;		}		/*** @private */		public function set silenceLevel(silenceLevel : int) : void {			_silenceLevel = silenceLevel;			_device.setSilenceLevel( _silenceLevel, _timeout );		}				/**		 * Controls the sound of this microphone object when it is in loopback mode. 		 */		public function get soundTransform() : SoundTransform {			return _device.soundTransform;		}		/*** @private */		public function set soundTransform(transform : SoundTransform) : void {			_device.soundTransform = transform;		}				//  DEVICE GETTERS		/**		 * The attached microphone driver's <code>Microphone</code> instance.		 */		public function get microphone() : Microphone {			return _device;		}	}}