package com.myMath{	import flash.display.MovieClip;	import com.globals;	public class hitTestLine {		public function hitTestLine():void {		}		public static function getAngledLine(startX:int, startY:int, myAngle:int,testObj:MovieClip,dist:int, testPoints:int, sight:Boolean=false,secondaryHitCheck:MovieClip=null):int {			//I had to make sight for bullets. with sight set to false, the method goes for the entire loop and counts all the hits. if set to true, 			//the method will exit at the first hit, calculating the distance from the object to the wall. 			var lineVar:int=0;			var xPos:Number = Math.cos(myAngle*(Math.PI/180));			var yPos:Number = Math.sin(myAngle*(Math.PI/180));			for (var i:int=dist/testPoints; i<dist; i+=dist/testPoints) {				var xComp:Number=xPos*i+startX;				var yComp:Number=yPos*i+startY;				if (testObj.hitTestPoint(xComp,yComp,true)) {					if (sight) {						return i;					}					lineVar++;				}				if (secondaryHitCheck!=null) {					if (secondaryHitCheck.hitTestPoint(xComp,yComp,true)) {						if (sight) {							return i;						}						lineVar++;					}				}			}			if (lineVar==0&&sight) {				lineVar=dist;			}			return lineVar;		}		public static function getLine(startX:int, startY:int, testObj:MovieClip,dist:int, testPoints:int,invert:Boolean=false,xDir:int=0, yDir:int=1):int {			//if invert is true, then I am looking for the number of points NOT touching, as opposed to the points that ARE touching. 			var lineVar:int=0;			var interval:int=dist/testPoints;			for (var i:int=interval; i<dist; i+=interval) {				var xComp:Number=i*xDir+startX;				var yComp:Number=i*yDir+startY;				if (testObj.hitTestPoint(xComp,yComp,true)) {					lineVar+=interval;				}			}			if (invert) {				return dist-lineVar;			}			return lineVar;		}	}}