/** * sekati.display.StageDisplay * @version 1.3.9 * @author jason m horwitz | sekati.com * Copyright (C) 2008 jason m horwitz, Sekat LLC. All Rights Reserved. * Released under the MIT License: http://www.opensource.org/licenses/mit-license.php */package sekati.display {	import sekati.display.Canvas;	import sekati.events.StageEvent;		import flash.display.DisplayObject;	import flash.display.Stage;	import flash.display.StageDisplayState;	import flash.events.Event;	import flash.events.EventDispatcher;	import flash.events.MouseEvent;	import flash.geom.Point;	import flash.geom.Rectangle;	import flash.ui.Mouse;	import flash.utils.clearInterval;	import flash.utils.setInterval;		/**	 * StageDisplay provides an interface to the swf application Stage instance allowing display and 	 * non-displayObjects to interact with and control the stage.	 * 	 * <p><b>Note</b>: Fullscreen requires <em>Flash Player >= 9.0.28</em>, however, <em>9.0.115</em> 	 * is recommended for deferred rendering via <code>Canvas.stage.invalidate()</code>.</p>	 * 	 * @see sekati.events.StageEvent	 * @see sekati.display.Canvas	 * @see http://livedocs.adobe.com/flash/9.0/ActionScriptLangRefV3/flash/display/Stage.html	 */		final public class StageDisplay extends EventDispatcher {					/*** @private */		private static var _instance : StageDisplay;		/*** @private */		private static var resizeIntervalId : Number;		/*** @private */		private static var leaveIntervalId : Number;		/*** @private */		private static var idleIntervalId : Number;		/*** @private */		private var leavePoint : Point;		/*** @private */		private var isIdle : Boolean;				/**		 * Millisecond delay after <code>RESIZE</code> event to fire <code>RESIZE_COMPLETE</code>.		 */		private static var RESIZE_COMPLETE_MS : uint = 500;				/**		 * Millisecond delay after <code>LEAVE</code> event to fire <code>LEAVE_COMPLETE</code>.		 */		private static var LEAVE_COMPLETE_MS : uint = 500;				/**		 * Millisecond delay between <code>MOUSE_IDLE</code> checks for inactivity by user.		 */		private static var MOUSE_IDLE_MS : uint = 10000;		/**		 * StageDisplay Singleton Constructor		 * @param $ SingletonEnforcer internal to the AS file; this param prevents external instantiation without error.		 */		public function StageDisplay($ : SingletonEnforcer = null) {			if (!$) {				throw new ArgumentError( "sekati.display.StageDisplay is a Singleton and may only be accessed via its accessor methods: 'getInstance()' or '$'." );			}			Canvas.stage.addEventListener( Event.FULLSCREEN, fullscreenHandler );			Canvas.stage.addEventListener( Event.RESIZE, resizeHandler );			Canvas.stage.addEventListener( Event.MOUSE_LEAVE, leaveHandler );			Canvas.stage.addEventListener( Event.ACTIVATE, activateHandler );			Canvas.stage.addEventListener( Event.DEACTIVATE, deactivateHandler );			Canvas.stage.addEventListener( MouseEvent.MOUSE_MOVE, moveHandler );		}			/**		 * Singleton Accessor		 * @return StageDisplay		 */				public static function getInstance() : StageDisplay {			if(!_instance) _instance = new StageDisplay( new SingletonEnforcer( ) );			return _instance;		}		/**		 * Shorthand singleton accessor getter		 * @return StageDisplay		 */		public static function get $() : StageDisplay {			return StageDisplay.getInstance( );			}		/**		 * Parameterized Stage initialization.		 * @param framerate movie framerate		 * @param align stage alignment		 * @param scale stage scaleMode.		 * @param quality movie quality		 * @param focusRect add object border focus		 */		public function init(framerate : int = 31, align : String = "TL", scale : String = "noScale", quality : String = "HIGH", focusRect : Boolean = false) : void {			Canvas.stage.frameRate = framerate;			Canvas.stage.align = align;			Canvas.stage.scaleMode = scale;			Canvas.stage.quality = quality;			Canvas.stage.stageFocusRect = focusRect;			moveHandler( );		}		// EVENT HANDLERS		/**		 * Dispatches <code>StageEvent.FULLSCREEN<code> when the application toggles fullscreen mode.		 */		protected function fullscreenHandler(e : Event) : void {			//Logger.$.info( this, "@@@ stageFullscreen" );			dispatchEvent( new StageEvent( StageEvent.FULLSCREEN ) );		}		/**		 * Dispatches <code>StageEvent.RESIZE</code> when the application stage is resized.		 */		protected function resizeHandler(e : Event) : void {			if (!isNaN( resizeIntervalId )) clearInterval( resizeIntervalId );			resizeIntervalId = setInterval( resizeCompleteHandler, RESIZE_COMPLETE_MS );			//Logger.$.info( this, "@@@ stageResize" );			dispatchEvent( new StageEvent( StageEvent.RESIZE ) );		}		/**		 * Dispatches <code>StageEvent.RESIZE_COMPLETE</code> when <code>RESIZE_COMPLETE_MS</code> expires.		 */		protected function resizeCompleteHandler() : void {			//Logger.$.info( this, "@@@ resizeComplete (" + RESIZE_COMPLETE_MS + "ms expired since last resize)" );			dispatchEvent( new StageEvent( StageEvent.RESIZE_COMPLETE ) );			clearInterval( resizeIntervalId );		}		/**		 * Dispatches <code>StageEvent.LEAVE</code> when mouse leaves the application stage.		 */		protected function leaveHandler(e : Event) : void {			if (!isNaN( leaveIntervalId )) clearInterval( leaveIntervalId );			leavePoint = new Point( Canvas.stage.mouseX, Canvas.stage.mouseY );			leaveIntervalId = setInterval( leaveCompleteHandler, LEAVE_COMPLETE_MS );			//Logger.$.info( this, "@@@ stageLeave" );			dispatchEvent( new StageEvent( StageEvent.LEAVE ) );		}		/**		 * Dispatches <code>StageEvent.LEAVE_COMPLETE</code> when <code>LEAVE_COMPLETE_MS</code> expires.		 */		protected function leaveCompleteHandler() : void {			if(leavePoint.x == Canvas.stage.mouseX && leavePoint.y == Canvas.stage.mouseY) {				//Logger.$.info( this, "@@@ leaveComplete (" + LEAVE_COMPLETE_MS + "ms expired since last mouse movement)" );				dispatchEvent( new StageEvent( StageEvent.LEAVE_COMPLETE ) );			}			clearInterval( leaveIntervalId );		}				/**		 * Dispatches <code>StageEvent>ACTIVATE</code> when application regains focus.		 */		protected function activateHandler(e : Event) : void {			//Logger.$.info( this, "@@@ stageActivate" );			dispatchEvent( new StageEvent( StageEvent.ACTIVATE ) );		}		/**		 * Dispatches <code>StageEvent.DEACTIVATE</code> when application loses focus.		 */		protected function deactivateHandler(e : Event) : void {			//Logger.$.info( this, "@@@ stageDeactivate" );				dispatchEvent( new StageEvent( StageEvent.DEACTIVATE ) );		}		/**		 * Dispatches <code>StageEvent.MOUSE_RESUME</code> if the mouse activity resumes from idleness.		 */		protected function moveHandler(e : MouseEvent = null) : void {			if(e && isIdle) {				//Logger.$.info( this, "@@@ stageMouseResume" );				dispatchEvent( new StageEvent( StageEvent.MOUSE_RESUME ) );				Mouse.show( );				isIdle = false;			} 			clearInterval( idleIntervalId );			idleIntervalId = setInterval( idleHandler, MOUSE_IDLE_MS );		}		/**		 * Dispatches <code>StageEvent.MOUSE_IDLE</code> after <code>MOUSE_IDLE_MS</code> expires.		 */		protected function idleHandler() : void {			isIdle = true;			clearInterval( idleIntervalId );			//Logger.$.info( this, "@@@ stageMouseIdle" );			dispatchEvent( new StageEvent( StageEvent.MOUSE_IDLE ) );			if(fullscreen) {				Mouse.hide( );			}		}		// RESIZE_COMPLETE, LEAVE_COMPLETE, MOUSE_IDLE getter/setters		/**		 * Amount of post stage resize time (in milliseconds) before the <code>StageEvent.RESIZE_COMPLETE</code> event fires [Default: 500].		 */		public function get resizeCompleteTime() : uint {			return RESIZE_COMPLETE_MS;		}		/**		 * @private		 */		public function set resizeCompleteTime(ms : uint) : void {			RESIZE_COMPLETE_MS = ms;		}		/**		 * Amount of post stage leave time (in milliseconds) before the <code>StageEvent.LEAVE_COMPLETE</code> event fires [Default: 500].		 */		public function get leaveCompleteTime() : uint {			return LEAVE_COMPLETE_MS;		}		/**		 * @private		 */		public function set leaveCompleteTime(ms : uint) : void {			LEAVE_COMPLETE_MS = ms;		}		/**		 * Amount of mouse idle time (in milliseconds) before the <code>StageEvent.IDLE</code> event fires [Default: 10000].		 */		public function get idleTime() : uint {			return MOUSE_IDLE_MS;		}		/**		 * Boolean status of stage idle.		 */		public function get idle() : Boolean {			return isIdle;		}		/**		 * @private		 */		public function set idleTime(ms : uint) : void {			MOUSE_IDLE_MS = ms;		}		// STAGE, WIDTHS, HEIGHTS, SIZES, et. al.		/**		 * The current size of the stage.		 */		public function get size() : Rectangle {			return new Rectangle( 0, 0, Canvas.stage.stageWidth, Canvas.stage.stageHeight );		}		/**		 * Stage proportion.		 */		public function get proportion() : Number {			return Canvas.stage.stageWidth / Canvas.stage.stageHeight;			}				/**		 * The width, in pixels, of the Stage contents.		 * <p>Equivalent to: <code>Canvas.stage.width</code></p>		 */		public function get contentWidth() : Number {			return Canvas.stage.width;		}		/**		 * The height, in pixels, of the Stage contents.		 * <p>Equivalent to: <code>Canvas.stage.height</code></p>		 */		public function get contentHeight() : Number {			return Canvas.stage.height;		}		/**		 * Stage horizontal center. 		 */		public function get centerX() : Number {			return Canvas.stage.stageWidth / 2;		}		/**		 * Stage vertical center.		 */		public function get centerY() : Number {			return Canvas.stage.stageHeight / 2;		}		/**		 * Stage center point.		 */		public function get center() : Point {			return new Point( centerX, centerY );		}		// FULLSCREEN				/**		 * Indicates the players fullscreen status.		 */		public function get fullscreen() : Boolean {			return (Canvas.stage.displayState == StageDisplayState.FULL_SCREEN);		}		/**		 * @private		 */		public function set fullscreen(b : Boolean) : void {			Canvas.stage.displayState = (!b) ? StageDisplayState.NORMAL : StageDisplayState.FULL_SCREEN;		}		/**		 * Toggles the player between NORMAL and FULL_SCREEN.		 */		public function toggleFullscreen() : void {				fullscreen = !fullscreen;		}			/**		 * Alert <code>DisplayObject</code>'s on the next opportunity to render the display list.		 */		public function invalidate() : void {			Canvas.stage.invalidate( );		}					// FRAMERATE, ALIGNMENT, QUALITY, FOCUS, SCALE, CONTEXT MENU				/**		 * Test if a DisplayObject has focus within the stage.		 * @example <listing version="3.0">		 * var textFocus : Boolean = StageDisplay.$.hasFocus( myTextField );		 * </listing>		 */		public function hasFocus(o : DisplayObject) : Boolean {			return (Canvas.stage.focus == o);		}		/**		 * The frame rate of the stage.		 */		public function get frameRate() : int {			return Canvas.stage.frameRate;		}		/**		 * @private		 */		public function set frameRate(n : int) : void {			Canvas.stage.frameRate = n;		}		/**		 * A value from the StageScaleMode class that specifies which scale mode to use.		 * @see flash.display.StageScaleMode		 */				public function get scaleMode() : String {			return Canvas.stage.scaleMode;		}				/**		 * @private		 */		public function set scaleMode(mode : String) : void {			Canvas.stage.scaleMode = mode;		}		/**		 * Movie quality setting.		 * @see flash.display.StageQuality		 */		public function get quality() : String {			return Canvas.stage.quality;		}		/**		 * @private		 */		public function set quality(mode : String) : void {			Canvas.stage.quality = mode;		}		/**		 * Stage alignment		 * @see flash.display.StageAlign		 */		public function get align() : String {			return Canvas.stage.align;		}		/**		 * @private		 */		public function set align(val : String) : void {			Canvas.stage.align = val;		}		/**		 * Specifies whether or not objects display a glowing border when they have focus.		 */		public function get focusRect() : Boolean {			return Canvas.stage.stageFocusRect;		}		/**		 * @private		 */		public function set focusRect(b : Boolean) : void {			Canvas.stage.stageFocusRect = b;		}		/**		 * Returns value of property		 */		public function get showDefaultContextMenu() : Boolean {			return Canvas.stage.showDefaultContextMenu;		}		/**		 * @private		 */		public function set showDefaultContextMenu(b : Boolean) : void {			Canvas.stage.showDefaultContextMenu = b;		}				/**		 * Cleanup the StageDisplay singleton instance.		 */		public function destroy() : void {			clearInterval( resizeIntervalId );			clearInterval( leaveIntervalId );			clearInterval( idleIntervalId );			Canvas.stage.removeEventListener( Event.FULLSCREEN, fullscreenHandler );			Canvas.stage.removeEventListener( Event.RESIZE, resizeHandler );			Canvas.stage.removeEventListener( Event.MOUSE_LEAVE, leaveHandler );			Canvas.stage.removeEventListener( Event.ACTIVATE, activateHandler );			Canvas.stage.removeEventListener( Event.DEACTIVATE, deactivateHandler );			Canvas.stage.removeEventListener( MouseEvent.MOUSE_MOVE, moveHandler );					_instance = null;		}	}}/** * Internal class is accessible only to this AS file and is used  * as a constructor param to enforce proper Singleton behavior. */internal class SingletonEnforcer {}