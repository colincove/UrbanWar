/** * sekati.utils.XMLUtil * @version 1.1.1 * @author jason m horwitz | sekati.com * Copyright (C) 2008  jason m horwitz, Sekat LLC. All Rights Reserved. * Released under the MIT License: http://www.opensource.org/licenses/mit-license.php */package sekati.utils {	import sekati.utils.TypeEnforcer;		/**	 * XMLUtil static class wrapping various XML and XMLList utilities.	 * @see http://dispatchevent.org/roger/as3-e4x-rundown/	 */	public class XMLUtil {		/**		 * Constant representing a text node type returned from XML.nodeKind.		 * @see XML.nodeKind()		 */		public static const TEXT : String = "text";		/**		 * Constant representing a comment node type returned from XML.nodeKind.		 * @see XML.nodeKind()		 */             		public static const COMMENT : String = "comment";		/**		 * Constant representing a processing instruction type returned from XML.nodeKind.		 * @see XML.nodeKind()		 */             		public static const PROCESSING_INSTRUCTION : String = "processing-instruction";		/**		 * Constant representing an attribute type returned from XML.nodeKind.		 * @see XML.nodeKind()		 */             		public static const ATTRIBUTE : String = "attribute";		/**		 * Constant representing a element type returned from XML.nodeKind.		 * @see XML.nodeKind()		 */          		public static const ELEMENT : String = "element";		/**		 * Checks whether the specified string is valid and well formed XML.		 * @param data The string that is being checked to see if it is valid XML.		 * @return A Boolean value indicating whether the specified string is		 * valid XML.		 */		public static function isValidXML(data : String) : Boolean {			var xml : XML;         			try {				xml = new XML( data );			}			catch(e : Error) {				return false;			}                        			if(xml.nodeKind( ) != XMLUtil.ELEMENT) {				return false;			}           			return true;		}		/**		 * Get the first attribute/value pair match from the XMLList.		 * @example <listing version="3.0">		 * 	var data : XML = new XML( '<test><stuff><item id="0">zero</item><item id="1">one</item><item id="2">two</item></stuff></test>' );		 * 	trace( XMLUtil.byAttribute( data.stuff.*, 'id', '1' ) );		 * </listing>		 */		public static function byAttribute(x : XMLList, attr : String, value : String) : XML {			return x.(attribute( attr ) == value)[0];		}		/**		 * XMLUtil Static Constructor		 */		public function XMLUtil() {			TypeEnforcer.enforceStatic( XMLUtil );		}	}}