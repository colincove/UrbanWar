/** * sekati.events.ApplicationEventDispatcher * @version 1.2.0 * @author jason m horwitz | sekati.com * Copyright (C) 2008  jason m horwitz, Sekat LLC. All Rights Reserved. * Released under the MIT License: http://www.opensource.org/licenses/mit-license.php */package sekati.events {	import flash.events.EventDispatcher;	import flash.events.IEventDispatcher;	import sekati.events.ApplicationEvent;	/**	 * ApplicationEventDispatcher provides a central dispatching & eventing singleton target for API based applications.	 * The purpose of having a centralized dispatcher is to standardized the grouping of like <i>application event</i>;	 * meaning events created and utilized by your applications which do not originate from the API or the Flash / Flex frameworks.	 * 	 * @example <listing version="3.0">	 * var e : FormEvent ( FormEvent.USER_SUBMIT, {name:"sekati", phone:"+1.555.555.5555" confirm:true} ); // FormEvent inherits from sekati.events.ApplicationEvent.	 * ApplicationEventDispatcher.$.dispatchEvent ( e );	 * </listing>	 * 	 * @see sekati.events.ApplicationEvent	 * @see flash.events.EventDispatcher	 */	final public class ApplicationEventDispatcher {		private static var _instance : ApplicationEventDispatcher;		private static var _dispatcher : IEventDispatcher;		/**		 * ApplicationEventDispatcher Singleton Constructor		 * @param $ SingletonEnforcer - internal to the AS file; the param prevents external instantiation without error.		 * @param target provides the internally wrapped IEventDispatcher		 */		public function ApplicationEventDispatcher( $ : SingletonEnforcer = null, target : IEventDispatcher = null) {			if (!$) {				throw new ArgumentError( "sekati.events.ApplicationEventDispatcher is a Singleton and may only be accessed via its accessor methods: 'getInstance()' or '$'." );				}			_dispatcher = new EventDispatcher( target );		}		/**		 * Singleton Accessor		 * @return ApplicationEventDispatcher		 */		public static function getInstance() : ApplicationEventDispatcher {			if( _instance == null ) _instance = new ApplicationEventDispatcher( new SingletonEnforcer( ) );			return _instance;		}		/**		 * Shorthand singleton accessor getter		 * @return ApplicationEventDispatcher		 */		public static function get $() : ApplicationEventDispatcher {			return ApplicationEventDispatcher.getInstance( );			}		/**		 * Registers an <code>ApplicationEvent</code> listener with the <code>ApplicationEventDispatcher</code> singleton so that the listener receives notification of that 		 * <code>ApplicationEvent</code> (or <code>ApplicationEvent</code> descendent).		 * 		 * <p>When you no longer need an event listener, remove it by calling <code>ApplicationEventDispatcher.$.removeEventListener()</code> otherwise, memory problems might result. Objects 		 * with registered event listeners are not automatically removed from memory because the garbage collector does not remove objects that still have references.</p>		 * 		 * @param type 				The type (name) of event.		 * @param listener 			The listener function that processes the event. This function must accept an <code>ApplicationEvent</code> object as its only parameter and must return nothing, 		 * 							@example e.g <listing version="3.0"?>function( evt : ApplicationEvent ) : void</code>		 * @param useCapture 		Determines whether the listener works in the capture phase or the target and bubbling phases.		 * @param priority 			The priority level of the event listener. Priorities are designated by a 32-bit integer.		 * @param useWeakReference 	Determines whether the reference to the listener is strong or weak. A strong reference prevents your listener from being garbage-collected. A weak reference (the default) does not.		 */		public function addEventListener( type : String, listener : Function, useCapture : Boolean = false, priority : int = 0, useWeakReference : Boolean = true ) : void {			_dispatcher.addEventListener( type, listener, useCapture, priority, useWeakReference );		}		/**		 * Removes a listener from the <code>ApplicationEventDispatcher</code> singleton. If there is no matching listener registered with the <code>ApplicationEventDispatcher</code> a call to this method has no effect.		 * 		 * @param type 			The type of <code>ApplicationEvent</code> (or <code>ApplicationEvent</code> descendent).		 * @param listener 		The listener object to remove.		 * @param useCapture 	Specifies whether the listener was registered for the capture phase or the target and bubbling phases.		 */		public function removeEventListener( type : String, listener : Function, useCapture : Boolean = false ) : void {			_dispatcher.removeEventListener( type, listener, useCapture );		}		/**		 * Dispatches an <code>ApplicationEvent</code> into the event flow. The event target is the <code>ApplicationEventDispatcher</code> singleton upon which <code>dispatchEvent()</code> is called.		 * 		 * @param event 	The <code>ApplicationEvent</code> (or <code>ApplicationEvent</code> descendent) object dispatched into the event flow.		 * @return Boolean 	A value of <code>true</code> unless <code>preventDefault()</code> is called on the event, in which case it returns <code>false</code>.		 */		public function dispatchEvent( event : ApplicationEvent ) : Boolean {			return _dispatcher.dispatchEvent( event );		}		/**		 * Checks whether the <code>ApplicationEventDispatcher</code> has any listeners registered for a specific type of event. This allows you to determine where <code>ApplicationEventDispatcher</code> 		 * has altered handling of an event type in the event flow hierarchy. To determine whether a specific event type will actually trigger an event listener, use <code>IEventDispatcher.willTrigger()</code>.		 * 		 * <p>The difference between <code>hasEventListener()</code> and <code>willTrigger()</code> is that <code>hasEventListener()</code> examines only the object to which it belongs, 		 * whereas <code>willTrigger()</code> examines the entire event flow for the event specified by the type parameter.</p>		 * 		 * @param type 			The type of event.		 * @return Boolean 		A value of <code>true</code> if a listener of the specified type is registered; otherwise <code>false</code>.		 * @see ApplicationEventDispatcher#willTrigger		 */		public function hasEventListener( type : String ) : Boolean {			return _dispatcher.hasEventListener( type );		}		/**		 * Checks whether an event listener is registered with this <code>ApplicationEventDispatcher</code> for the specified event type. This method returns <code>true</code> if an event listener is 		 * triggered during any phase of the event flow when an event of the specified type is dispatched to the <code>ApplicationEventDispatcher</code>.		 * 		 * @param type 		The type of event.		 * @return Boolean 	A value of <code>true</code> if a listener of the specified type will be triggered; otherwise <code>false</code>.		 * @see ApplicationEventDispatcher#hasEventListener		 */		public function willTrigger(type : String) : Boolean {			return _dispatcher.willTrigger( type );		}			}}/** * Internal class is accessible only to this AS file and is used  * as a constructor param to enforce proper Singleton behavior. */internal class SingletonEnforcer {}	