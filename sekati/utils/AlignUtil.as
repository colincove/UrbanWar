/** * sekati.utils.AlignUtil * @version 1.1.1 * @author jason m horwitz | sekati.com * Copyright (C) 2008  jason m horwitz, Sekat LLC. All Rights Reserved. * Released under the MIT License: http://www.opensource.org/licenses/mit-license.php */package sekati.utils {	import sekati.display.Canvas;	import sekati.utils.TypeEnforcer;	import flash.display.DisplayObject;	import flash.display.Stage;			/**	 * Static class wrapping various Alignment utilities.	 */	public class AlignUtil {		/**		 * Center align object to target.		 */		public static function alignCenter(item : DisplayObject, target : DisplayObject) : void {			xAlignCenter( item, target );			yAlignCenter( item, target );		}		/**		 * Horizontal center align object to target.		 */		public static function xAlignCenter(item : DisplayObject, target : DisplayObject) : void {			item.x = int( target.width / 2 - item.width / 2 );		}		/**		 * Vertical center align object to target.		 */		public static function yAlignCenter(item : DisplayObject, target : DisplayObject) : void {			item.y = int( target.height / 2 - item.height / 2 );		}		/**		 * Right align object to target.		 */		public static function alignRight(item : DisplayObject, target : DisplayObject) : void {			xAlignRight( item, target );			yAlignRight( item, target );		}		/**		 * Horizontal right align object to target.		 */		public static function xAlignRight(item : DisplayObject, target : DisplayObject) : void {			item.x = int( target.width - item.width );		}		/**		 * Vertical right align object to target.		 */		public static function yAlignRight(item : DisplayObject, target : DisplayObject) : void {			item.y = int( target.height - item.height );		}		/**		 * Left align object to target.		 */		public static function alignLeft(item : DisplayObject, target : DisplayObject) : void {			xAlignLeft( item, target );			yAlignLeft( item, target );		}		/**		 * Horizontal left align object to target.		 */			public static function xAlignLeft(item : DisplayObject, target : DisplayObject) : void {			item.x = int( target.x );		}		/**		 * Vertical left  align object to target.		 */			public static function yAlignLeft(item : DisplayObject, target : DisplayObject) : void {			item.y = int( target.y );		}		/**		 * Align object centered, but based on a proportion (instead of 50/50).		 * @param item 	<code>DisplayObject</code> to be aligned.		 * @param prop 	proportion to align from top (i.e for 75/25 proportion pass .75); 1 is fully bottom justified; 0 is top justified;		 */		public static function stageAlignYProportion(item : DisplayObject, prop : Number) : void {			item.y = int( (Canvas.stage.stageHeight - item.height) * prop );		}		/**		 * Align object centered, but based on a proportion (instead of 50/50).		 * @param item 	<code>DisplayObject</code> to be aligned.		 * @param prop 	proportion to align from top (i.e for 75/25 proportion pass .75); 1 is fully right justified; 0 is left justified;		 */		public static function stageAlignXProportion(item : DisplayObject, prop : Number) : void {			item.x = int( (Canvas.stage.stageWidth - item.width) * prop );		}		/**		 * Align object to stage by width/height proportion.		 * @param item 		<code>DisplayObject</code> to be aligned.		 * @param propX 	proportion to align from top (i.e for 75/25 proportion pass .75); 1 is fully right justified; 0 is left justified;		 * @param propY 	proportion to align from top (i.e for 75/25 proportion pass .75); 1 is fully bottom justified; 0 is top justified;		 */		public static function stageAlignProportion(item : DisplayObject, propX : Number = NaN, propY : Number = NaN) : void {			if(!isNaN( propX )) item.x = int( (Canvas.stage.stageWidth - item.width) * propX );			if(!isNaN( propY )) item.y = int( (Canvas.stage.stageHeight - item.height) * propY );		}				/**		 * Center align object to stage.		 */		public static function stageAlignCenter(item : DisplayObject) : void {			stageAlignXCenter( item );			stageAlignYCenter( item );		}		/**		 * Horizontal center align object to stage.		 */		public static function stageAlignXCenter(item : DisplayObject) : void {			item.x = int( Canvas.stage.stageWidth / 2 - item.width / 2 );		}		/**		 * Vertical center align object to stage.		 */		public static function stageAlignYCenter(item : DisplayObject) : void {			item.y = int( Canvas.stage.stageHeight / 2 - item.height / 2 );		}		/**		 * Align object to stage right.		 */		public static function stageAlignRight(item : DisplayObject) : void {			item.x = int( Canvas.stage.stageWidth - item.width );		}		/**		 * Align object to stage bottom.		 */		public static function stageAlignBottom(item : DisplayObject) : void {			item.y = int( Canvas.stage.stageHeight - item.height );		}		/**		 * Set scale wrapper.		 * @param item 		to be scaled.		 * @param scale 	scale percentage [0-100].		 */		public static function scale(item : DisplayObject,scale : Number) : void {			item.scaleX = scale,			item.scaleY = scale;		}		/**		 * Scale target item to fit within target confines.		 * @param item 		to be aligned 		 * @param targetW 	item target width.		 * @param targetH 	item target height.		 * @param center 	object		 */		public static function scaleToFit(item : DisplayObject,targetW : Number,targetH : Number,center : Boolean) : void {			var widthRatio : Number = targetW / item.width;			var heightRatio : Number = targetH / item.height;			if(widthRatio < heightRatio) {				item.width = targetW;				item.scaleY = item.scaleX;			} else {				item.height = targetH;				item.scaleX = item.scaleY;			}			if (center) {				item.x = int( targetW / 2 - item.width / 2 );				item.y = int( targetH / 2 - item.height / 2 );			}		}		/**		 * Scale an item (largest side) while retaining the original <i>width:height</i> ratio.		 * @param item 		to be scaled.		 * @param targetW 	item target width.		 * @param targetH 	item target height.		 */		public static function scaleRatio(item : DisplayObject,targetW : Number,targetH : Number) : void {			item.width = targetW;			item.height = targetH;			( item.scaleX < item.scaleY ) ? item.scaleY = item.scaleX : item.scaleX = item.scaleY;				 		}		/**		 * Scale an item (smallest side) while retaining the original <i>width:height</i> ratio.		 * @param item 		to be scaled.		 * @param center 	whether to center the item on stage or not.		 */		public static function scaleRatioToFit(item : DisplayObject, targetW : Number, targetH : Number) : void {			item.width = targetW;			item.height = targetH;			( item.scaleX > item.scaleY ) ? item.scaleY = item.scaleX : item.scaleX = item.scaleY;				}				/**		 * Scale an item's largest side to the stage while retaining it's original <i>width:height</i> ratio.		 * @param item 		to be scaled.		 * @param center 	whether to center the item on stage or not.		 */		public static function scaleRatioToStage(item : DisplayObject, center : Boolean = true) : void {			var prop : Number = ((Canvas.stage.stageHeight / Canvas.stage.stageWidth) >= (item.height / item.width)) ? (Canvas.stage.stageWidth / item.width) : (Canvas.stage.stageHeight / item.height);				item.width = prop * item.width;			item.height = prop * item.height;			if(center) {				stageAlignCenter( item );			}		}				/**		 * Scale an item to proportionally fit the target object (based on the smallest side). <b>Note:</b> this method doesn't use the		 * <code>scaleX, scaleY</code> properties but uses <code>width, height</code> instead.		 * @param item 		to be scaled.		 * @param target 	to be proportionally scaled to. <i>Note:</i> this may be a <code>DisplayObject</code> or <code>Stage</code>.		 * @param center 	whether to center the <code>item</code> to the <code>target</code> or not.		 * @example <listing version="3.0">		 * 		AlignUtil.scaleProportion( myBox, Canvas.stage, true ); // proportionally resize the item to fit the stage and center it.		 * </listing>		 */		public static function scaleProportion(item : DisplayObject, target : *, center : Boolean = true) : void {			var targetWidth : Number = (target is Stage) ? Canvas.stage.stageWidth : target.width;			var targetHeight : Number = (target is Stage) ? Canvas.stage.stageHeight : target.height;			var prop : Number = (targetWidth >= targetHeight) ? (targetWidth / item.width) : (targetHeight / item.height);			item.width *= prop;			item.height *= prop;			if(center) {				if(target is Stage) {					stageAlignCenter( item );				} else {					alignCenter( item, target );				}			}		}				/**		 * Flip object on an axis.		 * @param obj 	to flip		 * @param axis 	to flip on ["x" or "y"]		 * @throws Error on invalid axis .		 */		public static function flip(obj : Object,axis : String = "y") : void {			if (axis != "x" && axis != "y") {				throw new Error( "@@@ AlignUtils.flip() Error: expects axis param: 'x' or 'y'." );				return;			}			var _scale : String = axis == "x" ? "scaleX" : "scaleY";			var _prop : String = axis == "x" ? "width" : "height";			obj[_scale] = -obj[_scale];			obj[axis] -= obj[_prop];		}				/**		 * AlignUtil Static Constructor		 */		public function AlignUtil() {			TypeEnforcer.enforceStatic( AlignUtil );		}	}}