/** * sekati.display.DocumentPreloader * @version 1.0.3 * @author jason m horwitz & pj ahlberg | sekati.com * Copyright (C) 2009  jason m horwitz, Sekat LLC. All Rights Reserved. * Released under the MIT License: http://www.opensource.org/licenses/mit-license.php */package sekati.display {	import sekati.events.BootstrapEvent;	import sekati.load.ApplicationLoader;	import sekati.log.Logger;	import sekati.validators.StringValidator;	import flash.display.Loader;	import flash.display.Sprite;	import flash.display.StageAlign;	import flash.display.StageQuality;	import flash.display.StageScaleMode;	import flash.events.Event;	import flash.events.ProgressEvent;	import flash.net.URLLoader;	import flash.net.URLRequest;	import flash.system.Security;	import flash.system.fscommand;		/**	 * The <code>DocumentPreloader</code> class is an <b>API independent shell</b> designed to load <i>Sekati API</i> <code>Document</code> driven SWF applications.	 * In other words; the <code>DocumentPreloader</code> should be extended and used as the <b>Main Document Class</b> for any <i>preloader SWF</i> use to load an 	 * API driven SWF.	 * 	 * <p><b>Main</b> methods which may be overridden and customized:<ul>	 * <li><code>initUIIntro</code> - initialize the look & feel of the preloader UI: <i>must</i> set <code>introComplete = true</code> when finished.</li>	 * <li><code>initUIOutro</code> - initialize the <i>outro</i> sequence of the preloader UI: <i>must</i> set <code>outroComplete = true</code> when finished.</li>	 * </ul></p>	 * 	 * <p><b>Secondary</b> methods which may be overriden and customized:<ul>	 * <li><code>initMovieProperties</code> - initialize SWF movie properties (<code>Stage, fscommand</code>, etc).</li>	 * <li><code>progress</code> -  invoked during the application loading process, you may use the properties <code>percent, bytesLoaded, bytesTotal</code></li>	 * <li><code>resize</code> - invoked when the stage initializes and resizes for liquid layout preloaders.</li>	 * </ul></p>	 * 	 * <p><b>Note:</b> that the API Application SWF Bootstrap sequence will begin once the loaded API swf is added to the stage via <code>initApplication()</code>.</p>	 * 	 * @see sekati.display.Document	 */	 	public class DocumentPreloader extends Sprite {		/**		 * The <code>config.xml</code> location used by the <code>DocumentPreloader</code> and <code>Document</code> 		 * passed via <code>FlashVars</code> or defaulting to <code>xml/config.xml</code>.		 */		public static var CONF_URI : String;				/**		 * The API Application SWF URI to be loaded (ascertained from the <code>config.xml</code>).		 */		public static var APPLICATION_URI : String;		/**		 * Property set by <code>initUIIntro()</code> when the intro sequence completes.		 */		protected var introComplete : Boolean;				/**		 * Property set by <code>initUIOutro()</code> when the outro sequence completes.		 */		protected var outroComplete : Boolean;				/**		 * @private		 * The disposable <code>ApplicationLoader</code> which invisibly preloads the preloader SWF itself.		 */		protected var _preloader : ApplicationLoader;				/**		 * @private		 * The disposable <code>XML URLLoader</code> to manage the <code>config.xml</code>.		 */		protected var _xmlLoader : URLLoader;				/**		 * @private		 * The <code>Loader</code> containing the <code>Document</code> drive API Application SWF.		 */		protected var _loader : Loader;				/*** @private */		protected var _percent : Number;				/*** @private */		protected var _bytesLoaded : uint;					/*** @private */		protected var _bytesTotal : uint;		/**		 * DocumentPreloader Constructor		 */		public function DocumentPreloader() {			addEventListener( Event.ADDED_TO_STAGE, initDocumentPreloader );		}		/**		 *  Initializes the preloader and movie properties when the stage becomes available.		 */		protected function initDocumentPreloader(e : Event = null) : void {			Logger.$.status( this, "### - DocumentPreloader Initialized ..." );			removeEventListener( Event.ADDED_TO_STAGE, initDocumentPreloader );						CONF_URI = ( !root.loaderInfo.parameters['conf_uri'] ) ? "xml/config.xml" : root.loaderInfo.parameters['conf_uri'];			initMovieProperties( );						_preloader = new ApplicationLoader( this.stage );			_preloader.addEventListener( BootstrapEvent.APP_LOAD, initPreloader );		}		/**		 * Initializes SWF movie properties.		 * 		 * <p><b>Customization:</b> Override this method & adjust to fit your application specification.</p>		 */		protected function initMovieProperties() : void {			Logger.$.info( this, "### - Initializing Movie Properties ..." );			Security.allowDomain( "*" );			Security.allowInsecureDomain( "*" );			fscommand( "swLiveConnect", "true" );			fscommand( "allowscale", "false" );			fscommand( "showmenu", "false" );			fscommand( "fullscreen", "false" );						stage.frameRate = 31;			stage.align = StageAlign.TOP_LEFT;			stage.scaleMode = StageScaleMode.NO_SCALE;			stage.quality = StageQuality.HIGH;			stage.stageFocusRect = false;						}				/**		 *  Initialize the Document Preloader UI & load the <code>config.xml</code> (invoked when the preloader SWF itself is done loading).		 */		protected function initPreloader(e : Event = null) : void {			Logger.$.info( this, "### - Loading API Config [" + CONF_URI + "] ..." );			_preloader.removeEventListener( BootstrapEvent.APP_LOAD, initPreloader );			_preloader = null;						// add resize detection here to avoid the fp bug: 			// http://hubflanger.com/stage-resize-and-the-stagewidth-and-stageheight-properties/			stage.addEventListener( Event.RESIZE, resize );									// load the config.xml & wait for UI confirmation ...			XML.ignoreWhitespace = XML.ignoreComments = true;			_xmlLoader = new URLLoader( );			_xmlLoader.load( new URLRequest( CONF_URI ) );			_xmlLoader.addEventListener( Event.COMPLETE, configHandler );							initUIIntro( );		}		/**		 * Initialize the preloader <i>UI intro</i> and set <code>introComplete = true;</code> when UI has completed build up.		 * 		 * <p><b>Customization:</b> Override this method to execute any custom intro code for a the visual preloader.</p>		 */		protected function initUIIntro() : void {			introComplete = true;		}				/**		 * The <code>config.xml</code> has loaded; wait for notification from <code>initUIIntro</code> to set <code>introComplete</code>.		 */		protected function configHandler(e : Event) : void {			var introChecker : Function = function(e : Event) : void {				if(introComplete) {					Logger.$.info( this, "--- DocumentPreloader INTRO Complete ..." );					removeEventListener( Event.ENTER_FRAME, introChecker );					initApplicationLoader( );				}			};			var xml : XML = new XML( e.target.data );			APPLICATION_URI = xml.preload.application;						_xmlLoader.removeEventListener( Event.COMPLETE, configHandler );			_xmlLoader = null;						addEventListener( Event.ENTER_FRAME, introChecker );		}		/**		 * Load the API Application SWF.		 */		protected function initApplicationLoader() : void {			var request : URLRequest = new URLRequest( APPLICATION_URI ); 			if(StringValidator.isBlank( APPLICATION_URI )) {				Logger.$.fatal( this, "### DocumentPreloader DEATH: API Application URI not found ###" );				throw new Error( "DocumentPreloader Death." );								return;			}			Logger.$.status( this, "### - Loading API Application [" + APPLICATION_URI + "] ..." );			_loader = new Loader( );			_loader.contentLoaderInfo.addEventListener( Event.COMPLETE, applicationHandler );			_loader.contentLoaderInfo.addEventListener( ProgressEvent.PROGRESS, progress );			_loader.load( request );		}		/**		 * The API Appliction SWF has been loaded; wait for notification from <code>initUIOutro</code> to set <code>outroComplete</code>.		 */		protected function applicationHandler(e : Event) : void {			var outroChecker : Function = function(e : Event) : void {				if(outroComplete) {					Logger.$.info( this, "--- DocumentPreloader OUTRO Complete ..." );					removeEventListener( Event.ENTER_FRAME, outroChecker );					initApplication( );				}			};			addEventListener( Event.ENTER_FRAME, outroChecker );						initUIOutro( );			}		/**		 * Initialize the preloader <i>UI outro</i> and set <code>outroComplete = true;</code> when UI has completed tear down.		 *  		 * <p><b>Customization:</b> Override this method to execute any custom outro code for a visual preloader.</p>		 */		protected function initUIOutro() : void {			outroComplete = true;				}				/**		 * Initialize the loaded API Application SWF.		 * 		 * <p><b>Customization:</b> Override this method to delay API SWF initialization, and execute any visual 		 * preloader '<i>outro</i>' sequence before application initializes. If this method is not overridden, 		 * the API SWF will initialize as soon as its load completes.</p>		 */		protected function initApplication() : void {			Logger.$.info( this, "### - Initializing Application Hand-off ..." );			_loader.contentLoaderInfo.removeEventListener( Event.COMPLETE, initApplication );			_loader.contentLoaderInfo.removeEventListener( ProgressEvent.PROGRESS, progress );			stage.removeEventListener( Event.RESIZE, resize );			addChild( _loader.content );		}		/**		 * API Application SWF progress handler.		 * 		 * <p><b>Customization:</b> Override this method to execute any custom code to visualize progress in your preloader.</p>		 */		protected function progress(e : ProgressEvent) : void {			_bytesLoaded = e.bytesLoaded;			_bytesTotal = e.bytesTotal;			_percent = e.bytesLoaded / e.bytesTotal;		}			/**		 * Stub function to invoke upon a stage resize.		 * 		 * <p><b>Customization:</b> Override this method to execute any custom resize logic as the API has yet to initialize.</p>		 */		protected function resize(e : Event = null) : void {		}					/**		 * The percentage (<code>0 - 1</code> scale) of the Application SWF currently loaded.		 */		public function get percent() : Number {			return (!isNaN( _percent )) ? _percent : 0;		}		/**		 * The number of <i>loaded</i> bytes of the Application SWF.		 */		public function get bytesLoaded() : Number {			return (!isNaN( _bytesLoaded )) ? _bytesLoaded : 0;		}		/**		 * The number of <i>total</i> bytes of the Application SWF.		 */				public function get bytesTotal() : Number {			return (!isNaN( _bytesTotal )) ? _bytesTotal : 0;					}	}}