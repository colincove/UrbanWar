/** * sekati.load.QueueLoader * @version 1.0.0 * @author jason m horwitz | sekati.com * Copyright (C) 2009  jason m horwitz, Sekat LLC. All Rights Reserved. * Released under the MIT License: http://www.opensource.org/licenses/mit-license.php */package sekati.load {	import sekati.events.LoaderQueueEvent;		import sekati.collections.TypedArray;	import flash.events.Event;	import flash.events.EventDispatcher;	import flash.events.IOErrorEvent;	import flash.events.ProgressEvent;	import flash.events.SecurityErrorEvent;		/**	 * QueueLoader provides the core <code>ILoader</code> group loading logic for the API.	 * 	 * XXX - NOT YET COMPLETE: DO NOT IMPLEMENT YET!	 */	public class LoaderQueue extends EventDispatcher {		protected var _loaders : TypedArray;		protected var _currentIndex : uint;		protected var _isLoading : Boolean;		protected var _isComplete : Boolean;		/**		 * QueueLoader Constructor		 * @param items 	array of loadable item <code>URL</code>'s or </code>ILoader</code> instances.		 */		public function LoaderQueue() {			super( );			_loaders = new TypedArray( ILoader );			_currentIndex = 0;			_isLoading = false;			_isComplete = false;		}		/**		 * Add a <code>ILoader</code> item into the queue.		 * @param url 	of the item to be queue loaded.		 * @return 		the queue index of the item.		 */		public function addItem(url : String) : uint {			var FileLoader : Class = FileType.getLoaderClass( url );			var loader : ILoader = new FileLoader( url );			var index : uint = _loaders.push( loader );			return index;		}		/**		 * Optimized <code>dispatchEvent</code> only dispatches when there are listeners.		 */		override public function dispatchEvent(e : Event) : Boolean {			if (hasEventListener( e.type ) || e.bubbles) {				return super.dispatchEvent( e );			}			return true;		}				/**		 * Configure the adding & removing of loader listeners.		 * @param isAdd 	<code>true</code> adds the listeners, <code>false</code> removes them.		 */		protected function configureListeners(isAdd : Boolean = true) : void {			var listener : String = (isAdd) ? "addEventListener" : "removeEventListener";			currentLoader[listener]( Event.OPEN, openHandler );			currentLoader[listener]( Event.CLOSE, closeHandler );						currentLoader[listener]( ProgressEvent.PROGRESS, progressHandler );			currentLoader[listener]( IOErrorEvent.IO_ERROR, errorHandler );			currentLoader[listener]( SecurityErrorEvent.SECURITY_ERROR, errorHandler );			currentLoader[listener]( Event.INIT, initHandler );		}		/*** @private */		protected function openHandler(e : Event) : void {			dispatchEvent( new LoaderQueueEvent( LoaderQueueEvent.ITEM_START ) );		}		/*** @private */		protected function closeHandler(e : Event) : void {			dispatchEvent( new LoaderQueueEvent( LoaderQueueEvent.ITEM_CLOSE ) );		}				/*** @private */		protected function progressHandler(e : ProgressEvent) : void {			//dispatchEvent( new LoaderQueueEvent( LoaderQueueEvent.ITEM_PROGRESS ) );		}		/*** @private */		protected function errorHandler(e : Event) : void {			dispatchEvent( new LoaderQueueEvent( LoaderQueueEvent.ITEM_ERROR ) );		}			/*** @private */		protected function initHandler(e : Event) : void {			dispatchEvent( new LoaderQueueEvent( LoaderQueueEvent.ITEM_INIT ) );		}							/**		 * The <code>ILoader TypedArray</code>. 		 */		public function get loaders() : TypedArray {			return _loaders;		}		/**		 * The currently queued <code>ILoader</code>.		 */		public function get currentLoader() : ILoader {			return loaders[_currentIndex];		}		/**		 * The currently queued <code>ILoader</code>.		 */		public function get currentLoaderURL() : String {			return currentLoader.url;		}		/**		 * The loading status of the queue; if <code>true</code> the queue is loading, if <code>false</code> the queue has not started yet.		 */		public function get loading() : Boolean {			return _isLoading;		}		/**		 * The completion status of the queue; if <code>true</code> the queue is complete, if <code>false</code> the queue is not finished.		 */		public function get complete() : Boolean {			return _isComplete;		}			/**		 * Percentage of queue complete.		 */		public function get percent() : Number {			if(loading || complete ) {				return (_currentIndex / _loaders.length) + (currentLoader.percent / _loaders.length);			} else {				return 0;			}		}		/**		 * The number of items in queue.		 */		public function get length() : uint {			return _loaders.length;		}		}}