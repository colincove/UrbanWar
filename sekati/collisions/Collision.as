/** * sekati.collisions.Collision * @version 1.0.0 * @author jason m horwitz | sekati.com * Copyright (C) 2009  jason m horwitz, Sekat LLC. All Rights Reserved. * Released under the MIT License: http://www.opensource.org/licenses/mit-license.php */package sekati.collisions {	import flash.display.DisplayObject;			/**	 * Collision provides the data associated with a <code>DisplayObject</code> collision.	 * @see sekati.collisions.CollisionDetector	 * @see sekati.collisions.GroupCollisionDetector	 */	public class Collision {		/*** @private */		protected var _object1 : DisplayObject;		/*** @private */		protected var _object2 : DisplayObject;		/*** @private */		protected var _angle : Number;		/*** @private */		protected var _overlap : uint;		/**		 * Collision Constructor		 * @param object1 	The first object involved in the collision. <i>This is always the smaller object of the two</i>.		 * @param object2 	The second object involved in the collision. <i>This is always the larger object of the two</i>.		 * @param angle 	The angle of the collision. This is only returned if <code>returnAngle</code> is set to <code>true</code>; otherwise it will return <code>-1</code>.		 * @param overlap 	The pixel overlap between the two <code>DisplayObject</code> during the collision.		 */		public function Collision(object1 : DisplayObject, object2 : DisplayObject, angle : Number, overlap : uint) {			_object1 = object1;			_object2 = object2;			_angle = angle;			_overlap = overlap;		}		/**		 * The smaller object involved in the collision.		 */		public function get object1() : DisplayObject {			return _object1;		}		/**		 * The larger object involved in the collision.		 */		public function get object2() : DisplayObject {			return _object2;		}		/**		 * The angle of the collision as <i>radian</i> or <i>degree</i> (only if <code>returnAngle</code> 		 * is set <code>true</code>, else <code>-1</code> will be returned).		 * @see sekati.collisions.CollisionAngle		 */		public function get angle() : Number {			return _angle;		}		/**		 * The pixel overlap between <code>object1</code> & <code>object2</code> during the collision.		 */		public function get overlap() : uint {			return _overlap;		}	}}