/** * sekati.events.DeviceEvent * @version 1.0.1 * @author jason m horwitz | sekati.com * Copyright (C) 2009  jason m horwitz, Sekat LLC. All Rights Reserved. * Released under the MIT License: http://www.opensource.org/licenses/mit-license.php */package sekati.events {	import flash.events.Event;	/**	 * DeviceEvent provides a base event for <code>Camera</code> and <code>Microphone</code> devices.	 * @see sekati.media.CameraDevice	 * @see sekati.media.MicrophoneDevice	 */	public class DeviceEvent extends Event {				/**		 * @eventType "deviceAvailable" fires when a device which can be connected to is detected.		 */				public static const DEVICE_AVAILABLE : String = 'deviceAvailable';								/**		 * @eventType "deviceBusy" fires when a device is detected but is busy or the user clicked <i>"remember"</i> in the <code>Security Panel</code>.		 */				public static const DEVICE_BUSY : String = 'deviceBusy';					/**		 * @eventType "deviceUnavilable" fires when there is no device available to connect to.		 */				public static const DEVICE_UNAVAILABLE : String = 'deviceUnavilable';								/**		 * @eventType "deviceMute" fires when the device is muted or the user declines to allow connection in the <code>Security Panel</code>.		 */		public static const DEVICE_MUTE : String = 'deviceMute';		/**		 * @eventType "deviceUnmute" fires when the device is unmuted or the user allows the connection in the <code>Security Panel</code>.		 */		public static const DEVICE_UNMUTE : String = 'deviceUnmute';				/**		 * @eventType "deviceActivity" fires when the device is unmuted.		 */		public static const DEVICE_ACTIVITY : String = 'deviceActivity';										/*** @private */						protected var _activating : Boolean;				/*** @private */		protected var _activityLevel : Number;		/**		 * DeviceEvent Constructor		 */		public function DeviceEvent(type : String, activating : Boolean = false, activityLevel : Number = 0, bubbles : Boolean = true, cancelable : Boolean = false) {			super( type, bubbles, cancelable );			_activating = activating;			_activityLevel = activityLevel;		}		/**		 * @inheritDoc		 */		override public function clone() : Event {			return new DeviceEvent( type, _activating, _activityLevel, bubbles, cancelable );		}		/**		 * <code>Boolean</code> representing whether the device is experiencing activity (<code>true</code>) or not (</code>false</code>).		 */		public function get activating() : Boolean {			return _activating;		}				/**		 * The amount of activity the device is detecting. Ranges from <code>0</code> (no activity 		 * detected) to <code>100</code> (a large amount of activity detected).		 */		public function get activityLevel() : Number {			return _activityLevel;		}	}}