package com.levels{	import flash.display.MovieClip;	import com.interfaces.Program;	import flash.events.KeyboardEvent;	import com.globals;	import com.displayObjects.activeObj;	import com.globalFunctions;	import flash.display.DisplayObject;	import flash.display.DisplayObjectContainer;import com.GameComponent;	public class GroundControl extends GameComponent implements Program {		public var progRun:Boolean;//Program Run. True if running, false if not. 		private var elements:Vector.<DisplayObject>;		private var left:int=0;		private var right:int=0;		public function GroundControl():void		{			elements=new Vector.<DisplayObject>  ;			for (var i:int=0; i<numChildren; i++) 			{				var child:DisplayObject=this.getChildAt(i);				removeStart(child);			}			elements.sort(function compare(x:*, y:*):Number {return DisplayObject(x).x-DisplayObject(y).x});			for each (var element:DisplayObject in elements)			{				element.parent.removeChild(element);			}			globals.groundControl=this;			globals.game_progThread.addProg(this);			progRun=true;		}		public override function destroy():void		{			super.destroy();			globals.groundControl=null;			globals.game_progThread.removeProg(this);			elements.splice(0,elements.length);		}		public function update():Object		{			if(elements!=null && globals.HUD!=null && globals.enemyContainer!=null){										if (right<elements.length)			{				if ((globals.HUD.x+800)-(elements[right].x+globals.enemyContainer.x)>0) {					addElement(elements[right++]);				}			}			if (left<elements.length) {				if ((globals.HUD.x-800)-(elements[left].x+globals.enemyContainer.x)>0) {					removeElement(elements[left++]);				}			}			}			return this;		}		public function isRunning():Boolean {			return progRun;		}		private function removeStart(element:DisplayObject):void {			if (element is activeObj) {				elements.push(element);				globalFunctions.removeFromList(globals.activeObjectList,element);			} else {				if (element is DisplayObjectContainer)				{					var add:Boolean=false;					var elementNumChildren:int=DisplayObjectContainer(element).numChildren;					for (var j:int=0; j<elementNumChildren; j++) {						if (DisplayObjectContainer(element).getChildAt(j) is activeObj)						{							add=true;							globalFunctions.removeFromList(globals.activeObjectList,DisplayObjectContainer(element).getChildAt(j));						}					}					if (add) 					{						elements.push(element);					}				}			}		}		private function removeElement(element:DisplayObject):void {			if (element is activeObj)			{				globalFunctions.removeFromList(globals.activeObjectList,element);				if(element.parent){				element.parent.removeChild(element);				}			} else {				if (element is DisplayObjectContainer) 				{					var add:Boolean=false;					var elementNumChildren:int=DisplayObjectContainer(element).numChildren;					for (var j:int=0; j<elementNumChildren; j++) 					{						if (DisplayObjectContainer(element).getChildAt(j) is activeObj) {							add=true;							globalFunctions.removeFromList(globals.activeObjectList,DisplayObjectContainer(element).getChildAt(j));						}					}					if (add) 					{						if(element.parent){						element.parent.removeChild(element);						}					}				}			}		}		private function addElement(element:DisplayObject):void {			this.addChild(element);			if (element is activeObj) 			{				globals.activeObjectList.push(element);			} else {				if (element is DisplayObjectContainer) 				{					var add:Boolean=false;										var elementNumChildren:int=DisplayObjectContainer(element).numChildren;					for (var j:int=0; j<elementNumChildren; j++) {						if (DisplayObjectContainer(element).getChildAt(j) is activeObj) 						{							add=true;							globals.activeObjectList.push(DisplayObjectContainer(element).getChildAt(j));						}					}					if (add) 					{											}				}			}		}	}}