/** * sekati.external.ExternalBase * @version 1.1.5 * @author jason m horwitz | sekati.com * Copyright (C) 2008 jason m horwitz, Sekat LLC. All Rights Reserved. * Released under the MIT License: http://www.opensource.org/licenses/mit-license.php */package sekati.external {	import sekati.log.Logger;	import sekati.utils.TypeEnforcer;	import sekati.validators.FlashValidator;		import flash.external.ExternalInterface;	import flash.system.Capabilities;		/**	 * Advanced ExternalInterface helpers, wrappers & utilities.	 */	public class ExternalBase {		/*** @private */		private static var isJavascriptReady : Boolean = false;		/*** @private */		private static var hasDisplayedReadyError : Boolean = false;				/**		 * Evaluate the application instance to insure an external call can be place successfully:<ul>		 * <li><code>ExternalInterface.isAvailable</code></li>		 * <li><code>FlashValidator.isBrowser</code></li>		 * <li><code>body.onLoad</code></li></ul> 		 */		public static function get isReady() : Boolean {			// optimized to return if we've already been thru these evals			if(isJavascriptReady) return true;						// if available and in browser test for the body.onload			if(ExternalInterface.available && FlashValidator.isBrowser) {				// test for the body.onLoad				var js : String = "function( ) { return true; }";				try {					isJavascriptReady = ExternalInterface.call( js );					//trace( "isJavascriptReady = " + isJavascriptReady );				} catch (e : Error) {					if(!hasDisplayedReadyError) {						hasDisplayedReadyError = true;						Logger.$.error( ExternalBase, "isReady ExternalInterface call check invoked a non-fatal error: " + e.message );					}					return false;				}			}			return isJavascriptReady;		}		/**		 * Attempt an <code>ExternalInterface.call</code> if available; catching any resulting errors.		 * @param js 	the raw <code>javascript</code> to execute with error handling.		 * @return the return value of the <code>javascript</code> call.		 * @see flash.external.ExternalInterface#call		 */		public static function safeCall(js : String) : * {			if(isReady) {				try {					return ExternalInterface.call( js );				} catch(e : Error) {					Logger.$.error( ExternalBase, "safeCall( " + js + ") invoked a non-fatal error: " + e.message );				}			}		}		/**		 * Attempt an <code>ExternalInterface.call</code> to a <code>javascript</code> function with 		 * arguments, if available; catching any resulting errors.		 * @param jsFunctionName 	the raw <code>javascript</code> to execute with error handling.		 * @param jsFunctionArgs	the arguments to be passed in to the <code>javascript</code> call.		 * @return the return value of the <code>javascript</code> call.		 * @see flash.external.ExternalInterface#call		 */		public static function safeFunctionCall(jsFunctionName : String, ...jsFunctionArgs) : * {			if(isReady) {				try {					jsFunctionArgs.unshift( jsFunctionName );					return ExternalInterface.call.apply( null, jsFunctionArgs );				} catch(e : Error) {					Logger.$.error( ExternalBase, "safeFunctionCall( " + jsFunctionName + ") invoked a non-fatal error: " + e.message );				}			}					}		/**		 * Wrap a <code>safeCall</code> in an anonymous <code>function</code> to execute complex javascript.		 * @param js javascript method code sans <code>function(){ ... }</code> wrapping.		 * @return the return value of the <code>javascript</code> call.		 * @example <listing version="3.0">		 * 	var test : Boolean = ExternalBase.safeWrappedCall( "var b = true; return b;" ); // creates & executes: "function(){ var b = true; return b; };"		 * 	trace( test );		 * </listing>		 * @see flash.external.ExternalInterface#call		 */		public static function safeWrappedCall(js : String) : * {			return safeCall( "function(){ " + js + " }" );		}		/**		 * Attempt an <code>ExternalInterface.addCallback</code> if available; catching any resulting errors.		 * @param jsFunctionName 	the <code>javascript</code> function to add a callback to.		 * @param closure			the <code>actionscript</code> function to fire.		 */		public static function safeAddCallback(jsFunctionName : String, closure : Function) : void {			if(isReady) {				try {					ExternalInterface.addCallback( jsFunctionName, closure );				} catch(e : Error) {					Logger.$.error( ExternalBase, "safeAddCallback( " + jsFunctionName + ") invoked a non-fatal error: " + e.message );				}			}		}				/**		 * Check if a javascript external asset is installed (and that <code>ExternalInterface</code> is available & the swf is running in browser)		 * @param jsObj 	the javascript object or method to check for.		 * @return 			<code>true</code> if asset is available for use, <code>false</code> if not.		 */		public static function isExternalAsset(jsObj : String) : Boolean {			if(isReady) {				//var installed : Boolean = ExternalInterface.call( "function(){ return typeof " + jsObj + " != 'undefined' }" );				var installed : Boolean = safeWrappedCall( "return typeof " + jsObj + " != 'undefined'" );								return installed;			} else { 				return false;				}		}		/**		 * Javascript alert.		 */		public static function alert(msg : String) : void {			ExternalInterface.call( 'alert', msg );		}		/**		 * Returns the <b>Browser</b> viewport yscroll & height allowing for tests whether the object is within the scrolled view or not.		 * @return Object containing the min (scroll from 0) and max (height of browser): <code>{ min:0, max:768 }</code>.		 */		public static function getBrowserView() : * {			var js : String = "function ( ) {";			js += "var myHeight = 0; var scrOfY = 0;";			// height			js += "if( typeof( window.innerHeight ) == 'number' ) {";			// non-IE			js += "myHeight = window.innerHeight;";			js += "} else if( document.documentElement && document.documentElement.clientHeight ) {";			// IE 6+ in 'standards compliant mode'			js += "myHeight = document.documentElement.clientHeight;";			js += "} else if( document.body && document.body.clientHeight ) {";			// IE 4 compatible			js += "myHeight = document.body.clientHeight;";			js += "}";			// scroll			js += "if( typeof( window.pageYOffset ) == 'number' ) {";			// Netscape compliant			js += "scrOfY = window.pageYOffset;";			js += "} else if( document.body && document.body.scrollTop ) {";			// DOM compliant			js += "scrOfY = document.body.scrollTop;";			js += "} else if( document.documentElement && document.documentElement.scrollTop ) {";			// IE6 standards compliant mode			js += "scrOfY = document.documentElement.scrollTop;";			js += "}";			js += "return { min:scrOfY, max:(myHeight + scrOfY ) };";			js += "}";			//return ExternalInterface.call( js );			return safeCall( js );		}					/**		 * Javascript scroll window.		 */		public static function scrollWindow(xpos : uint, ypos : uint) : void {			//var js : String = "function(){ window.scrollTo(" + xpos + "," + ypos + "); }";			//ExternalInterface.call( js );			var js : String = "window.scrollTo(" + xpos + "," + ypos + ");";			safeWrappedCall( js );		}		/**		 * Javascript resize window.		 */		public static function resizeWindow(w : Number, h : Number) : void {			//var js : String = "function(){ window.resizeTo(" + w + "," + h + "); }";			//ExternalInterface.call( js );						var js : String = "window.resizeTo(" + w + "," + h + ");";			safeWrappedCall( js );		}		/**		 * Javascript shake window.		 */		public static function shakeWindow(amount : Number) : void {			//var js : String = "function(){ if(parent.moveBy){for(i = 10;i > 0;i--){for(j = " + amount + ";j > 0;j--){parent.moveBy(0,i);parent.moveBy(i,0);parent.moveBy(0,-i);parent.moveBy(-i,0);}}} }";			//ExternalInterface.call( js );								var js : String = "if(parent.moveBy){for(i = 10;i > 0;i--){for(j = " + amount + ";j > 0;j--){parent.moveBy(0,i);parent.moveBy(i,0);parent.moveBy(0,-i);parent.moveBy(-i,0);}}}";			safeWrappedCall( js );		}		/**		 * Javascript change status message.		 */		public static function status(msg : String) : void {			//var js : String = "function(){ if(typeof(this.href) != 'undefined') window.status = '" + msg + "' + ' URL: ' + this.href;else return false; }";			//ExternalInterface.call( js );			var js : String = "if(typeof(this.href) != 'undefined') window.status = '" + msg + "' + ' URL: ' + this.href;else return false;";			safeWrappedCall( js );		}		/**		 * Javascript pop centered window.		 */		public static function centerPop(wURL : String, wName : String, w : Number, h : Number, scr : Boolean) : void {			var cx : Number = Math.round( (Capabilities.screenResolutionX / 2) - (w / 2) );			var cy : Number = Math.round( (Capabilities.screenResolutionY / 2) - (h / 2) );			//var js : String = "function(){ NewWindow=window.open('" + wURL + "','" + wName + "','width=" + w + ",height=" + h + ",left=" + cx + ",top=" + cy + ",screenX=" + cx + ",screenY=" + cy + ",toolbar=no,location=no,scrolling=" + scr + ",directories=no,scrollbars=" + scr + ",status=no,statusbar=no,resizable=no,fullscreen=no'); NewWindow.focus(); }";			//ExternalInterface.call( js );			var js : String = "NewWindow=window.open('" + wURL + "','" + wName + "','width=" + w + ",height=" + h + ",left=" + cx + ",top=" + cy + ",screenX=" + cx + ",screenY=" + cy + ",toolbar=no,location=no,scrolling=" + scr + ",directories=no,scrollbars=" + scr + ",status=no,statusbar=no,resizable=no,fullscreen=no'); NewWindow.focus();";						safeWrappedCall( js );		}		/**		 * ExternalBase Static Constructor		 */		public function ExternalBase() {			TypeEnforcer.enforceStatic( ExternalBase );		}			}}