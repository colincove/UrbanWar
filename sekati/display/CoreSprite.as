/** * sekati.display.CoreSprite * @version 1.2.8 * @author jason m horwitz | sekati.com * Copyright (C) 2008 jason m horwitz, Sekat LLC. All Rights Reserved. * Released under the MIT License: http://www.opensource.org/licenses/mit-license.php */package sekati.display {	import sekati.core.ICoreInterface;	import sekati.core.sekati;	import sekati.log.Logger;	import sekati.reflect.Stringifier;		import flash.display.Sprite;	import flash.events.Event;		/**	 * CoreSprite is a foundational <code>DisplayObject</code> class 	 * and can be thought of as one of the main building block of 	 * API-based applications.	 */	public class CoreSprite extends Sprite implements ICoreInterface {		/*** @private */		protected var _this : Sprite;				/*** @private */		protected var _enabled : Boolean;				/**		 * CoreSprite Constructor		 */		public function CoreSprite() {			_this = this;			_enabled = true;			use namespace sekati;			addEventListener( Event.ADDED_TO_STAGE, onStage, false, 0, true );			addEventListener( Event.REMOVED_FROM_STAGE, offStage, false, 0, true );		}		/**		 * Stub: Sprite has been added to stage.		 */		protected function onStage(e : Event = null) : void {			//Logger.$.trace( _this, "added to stage." );		}		/**		 * Stub: Sprite has been removed from stage.		 */		protected function offStage(e : Event = null) : void {			//Logger.$.trace( _this, "removed from stage." );		}		/**		 * Request a redraw, use for deferred rendering.		 */		protected function invalidate() : void {			if(stage != null) {				stage.invalidate( );						} else {				Logger.$.warn( _this, "invalidate() should only be called while the CoreSprite is on the DisplayList." );			}		}		/**		 * Add multiple child <code>DisplayObject</code>'s.		 * @param args 	list of <code>DisplayObject</code>'s to add to the <code>DisplayList</code>.		 */		public function addChildren(...args) : void {			for (var i : int = 0; i < args.length ; i++) {				addChild( args[i] );			}		}			/**		 * Remove multiple child <code>DisplayObject</code>'s.		 * <p>If an array of children is not passed <code>removeChildren</code> removes <b>all child objects</b>.</p>		 * @param args 	list of <code>DisplayObject</code>'s to remove from the <code>DisplayList</code>.		 * 		 * <p>Warning: the <code>CoreSprite.removeChildren</code> is namespaced <code>sekati</code> from		 * the <code>sekati.core.sekati</code> namespace to prevent collision with the newly added 		 * <code>Sprite.removeChildren</code> in Flex SDK 4.5.1. To use this method you have two options:</p>		 * 		 * @example <listing version="3.0">		 * 	var mySprite : CoreSprite = new CoreSprite();		 * 	var myChild : CoreSprite = new CoreSprite();		 * 	mySprite.addChild( myChild );		 * 			 * 	// remove children directly with namespace:		 * 	mySprite.sekati::removeChildren( mySprite );		 * 			 * 	// or use the namespace		 * 	import sekati.core.sekati;		 * 	use namespace sekati;		 * 	mySprite.removeChildren( mySprite );		 * </listing>		 */		sekati function removeChildren(...args) : void {			if(args.length > 0) {				for (var i : int = 0; i < args.length ; i++) {					removeChild( args[i] );				}			} else {				var numChildren : int = _this.numChildren;				for (var j : int = 0; j < numChildren ; j++) {					//since removing 0 shifts everything down, keep removing 0.					removeChildAt( 0 );				}						}		}		/**		 * Clean up after thy self.		 */		public function destroy() : void {			removeEventListener( Event.ADDED_TO_STAGE, onStage );			removeEventListener( Event.REMOVED_FROM_STAGE, offStage );		}		/**		 * Return reflective output.		 * @return String		 */		override public function toString() : String {			return Stringifier.stringify( _this );		}		/**		 * The <code>scale</code> value.		 */		public function get scale() : Number {			return (scaleX >= scaleY) ? scaleX : scaleY;		}		/**		 * @private		 */		public function set scale(value : Number) : void {			scaleX = scaleY = value;		}		/**		 * Specifies the <i>mouse cursors modal state</i> in the object as an interactive 		 * target via: <code>buttonMode, mouseChildren & tabChildren</code>.		 */		public function get interactiveMode() : Boolean {			return _this.buttonMode;					}		/**		 * @private		 */		public function set interactiveMode(b : Boolean) : void {			_this.buttonMode = b;			_this.mouseChildren = _this.tabChildren = !b;					}		/**		 * <code>Boolean</code> stub property which subclasses implement to control core 		 * behavor availability such as interactivity, liquidity, drag-drop functionality.		 */		public function get enabled() : Boolean {			return _enabled;		}			/**		 * @private		 */		public function set enabled(b : Boolean) : void {			_enabled = b;		}										}}