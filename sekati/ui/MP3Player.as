/** * sekati.ui.MP3Player * @version 1.5.3 * @author jason m horwitz & steve baughman | sekati.com * Copyright (C) 2009 jason m horwitz, Sekat LLC. All Rights Reserved. * Released under the MIT License: http://www.opensource.org/licenses/mit-license.php */package sekati.ui {	import sekati.events.MediaEvent;	import sekati.media.MP3;	import sekati.ui.AbstractMediaPlayer;	import flash.display.MovieClip;	import flash.display.Sprite;	import flash.media.Sound;		/**	 * MP3Player provides playback control interface logic to be used with sekati.media.MP3.	 * 	 * <p>To implement pass references to UI controller instances to the <code>MP3Player</code> 	 * constructor & instantiate the MP3Player instance.</p>	 * 	 * @example <listing version="3.0">	 * var player : MP3Player = new MP3Player( playBtn, progressBar, bufferBar, gutterBar, volumeBtn );	 * player.init( 'path/to/my.mp3' );	 * </listing>	 * 	 * @see sekati.media.MP3	 * @see sekati.events.MediaEvent	 */	public class MP3Player extends AbstractMediaPlayer {		protected var _id3 : Object;		protected var _defaultVolume : Number;		protected var _defaultPan : Number;		/**		 * MP3Player Constructor		 * @param playBtn 		reference to play UI control.		 * @param progressBar	reference to progress UI to control.		 * @param bufferBar 	reference to buffer UI control.		 * @param gutterBar		reference to gutter UI to control.		 * @param volumeBtn 	reference to volume UI to control.		 * @param volume 		of the audio (0 - 1).		 * @param pan 			of the audio(0 = balanced, -1 = left, 1 = right).		 */		public function MP3Player(playBtn : MovieClip, progressBar : Sprite, bufferBar : Sprite, gutterBar : Sprite, volumeBtn : Sprite, volume : Number = 1, pan : Number = 0) {			super( playBtn, progressBar, bufferBar, gutterBar, volumeBtn );						_defaultVolume = volume;			_defaultPan = pan;		}		// CORE CONTROLS				/**		 * load audio and initialize MP3Player UI and MP3.		 * @param url		of mp3 file.		 * @param buffer 	in seconds.		 */		override public function init(url : String, buffer : uint = 4) : void {			super.init( url, buffer );			setVolume( _defaultVolume );			_media.pan = _defaultPan;				}		/**		 * @inheritDoc		 */		override protected function createMedia() : void {			_media = new MP3( );		}		/**		 * @inheritDoc		 */		override protected function addMediaListeners() : void {			super.addMediaListeners( );			_media.addEventListener( MediaEvent.START, statusHandler, false, 0, true );			_media.addEventListener( MediaEvent.COMPLETE, statusHandler, false, 0, true );			_media.addEventListener( MediaEvent.STREAM_NOT_FOUND, statusHandler, false, 0, true );			_media.addEventListener( MediaEvent.REBUFFER, statusHandler, false, 0, true );			_media.addEventListener( MediaEvent.REBUFFER_COMPLETE, statusHandler, false, 0, true );			_media.addEventListener( MediaEvent.METADATA, statusHandler, false, 0, true );			_media.addEventListener( MediaEvent.ID3, statusHandler, false, 0, true );		}		/**		 * @inheritDoc		 */		override protected function removeMediaListeners() : void {			super.removeMediaListeners( );			_media.removeEventListener( MediaEvent.START, statusHandler );			_media.removeEventListener( MediaEvent.COMPLETE, statusHandler );			_media.removeEventListener( MediaEvent.STREAM_NOT_FOUND, statusHandler );			_media.removeEventListener( MediaEvent.REBUFFER, statusHandler );			_media.removeEventListener( MediaEvent.REBUFFER_COMPLETE, statusHandler );			_media.removeEventListener( MediaEvent.METADATA, statusHandler );			_media.removeEventListener( MediaEvent.ID3, statusHandler );		}		// AUDIO HANDLERS		/**		 * @inheritDoc		 */		override protected function statusHandler(e : MediaEvent) : void {			super.statusHandler( e );			switch (e.type) {				case MediaEvent.START :					trace( "MP3Player-> MediaEvent: start" );					break;				case MediaEvent.COMPLETE :					trace( "MP3Player-> MediaEvent: complete" );					if(_media.isPlaying) {						playBtnClick( );					}					break;				case MediaEvent.STREAM_NOT_FOUND :					trace( "MP3Player-> MediaEvent: play_streamNotFound" );					break;				case MediaEvent.REBUFFER:					trace( "MP3Player-> MediaEvent: rebuffer" );					// we have unique events for these					break;				case MediaEvent.REBUFFER_COMPLETE:					trace( "MP3Player-> MediaEvent: rebufferComplete" );					// we have unique events for these					break;					case MediaEvent.ID3:					trace( "MP3Player-> MediaEvent: ID3" );					_id3 = e.id3;					break;													default :					trace( "MP3Player-> MediaEvent: unrecognized status code: " + e.code + ", type: " + e.type );			}					}		/**		 * Returns reference to current ID3 data object.		 */		public function get currentID3() : Object {			return _id3;		}		/**		 * The <code>MP3</code> being played.		 */		public function get audio() : MP3 {			return (_media != null) ? _media as MP3 : null;		}		/**		 * The <code>Sound</code> instance.		 */		public function get sound() : Sound {			return (audio.sound != null) ? audio.sound : null;		}			}}