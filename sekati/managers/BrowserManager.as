/** * sekati.managers.BrowserManager * @version 1.0.2 * @author jason m horwitz | sekati.com * Copyright (C) 2009  jason m horwitz, Sekat LLC. All Rights Reserved. * Released under the MIT License: http://www.opensource.org/licenses/mit-license.php */package sekati.managers {	import sekati.events.BrowserEvent;	import sekati.external.BrowserAddress;	import sekati.log.Logger;	import flash.events.EventDispatcher;	import flash.utils.clearInterval;	import flash.utils.setInterval;		/**	 * <p>BrowserManager provides advanced browser deeplink management to the API via URL Anchor (hash) tag & quasi-page control. Back & Forward browser 	 * button support is provided via a basic polling monitor which allows for a <i>significantly</i> simplified in-line alternative solution to	 * more complex <code>HTML/JavaScript</code> centric solutions such as SWFAddress in exchange for a very small performance trade off. In other words: 	 * this is a pure ActionScript solution to the browser "back button" question.</p>	 * 	 * <p><b>Note</b>: It is important to understand the relationship between <code>BrowserManager</code> & <code>BrowserAddress</code>; baseline anchor	 * management logic can be controlled thru either class but advanced management & notification is best done via the manager.</p>	 * 	 * <p>In general, BrowserManager only dispatches <code>BrowserEvent</code> events when the <i>user</i> changes the browser 	 * anchor (thru the back/forward button, manually or via <code>BrowserAddress</code>). The manager <i>intentionally</i> does not dispatch 	 * these events when the application itself changes the anchor via the BrowserManager facility; <i>however</i> if changed via javascript 	 * or actionscript wrappers such as <code>BrowserAddress</code> the <code>BrowserEvent</code> will fire.</p>	 * 	 * @example <listing version="3.0">	 * BrowserManager.$.addEventListener( BrowserEvent.ADDRESS_CHANGE, browserAddressChangeHandler );	 * 	 * function browserAddressChangeHandler(e : BrowserEvent ) : void {	 * 		trace( " the browser address changed to: " + e.path + " from: " + e.previousPath );	 * }	 * </listing>	 * 	 * @see sekati.core.Bootstrap	 * @see sekati.core.App#DEEPLINK_ENABLE	 * @see sekati.external.BrowserAddress	 */	public class BrowserManager extends EventDispatcher {		/**		 * The amount of time (in milliseconds) between <code>BrowserAddress</code> checks.		 */		public static var MONITOR_MS : int = 1500;		private static var _instance : BrowserManager;		private var _isMonitoring : Boolean;		private var monitorIntervalId : uint;		private var currentPath : String;		/**		 * BrowserManager Singleton Constructor		 * @param $ SingletonEnforcer - internal to the AS file; the param prevents external instantiation without error.		 */		public function BrowserManager( $ : SingletonEnforcer = null) {			if (!$) {				throw new ArgumentError( "sekati.managers.BrowserManager is a Singleton and may only be accessed via its accessor methods: 'getInstance()' or '$'." );				}			Logger.$.status( this, " - Browser Management Initializes ..." );			startMonitor( );		}		/**		 * Singleton Accessor		 * @return BrowserManager		 */		public static function getInstance() : BrowserManager {			if( _instance == null ) _instance = new BrowserManager( new SingletonEnforcer( ) );			return _instance;		}		/**		 * Shorthand singleton accessor getter		 * @return BrowserManager		 */		public static function get $() : BrowserManager {			return BrowserManager.getInstance( );			}		/**		 * Start monitoring the browser address for changes.		 */		public function startMonitor() : void {			monitorIntervalId = setInterval( pollBrowserAddress, MONITOR_MS );			_isMonitoring = true;			updateMonitor( );		}		/**		 * Stop monitoring the browser address for changes.		 */		public function stopMonitor() : void {			clearInterval( monitorIntervalId );			_isMonitoring = false;		}		/**		 * Update the current (tracking) path to the current browser anchor (this prevents the 		 * BrowserManager from dispatching a <code>BrowserEvent</code> due to a address change).		 */		public function updateMonitor() : void {			currentPath = BrowserAddress.anchor;		}		/**		 * Check the browser address ever <code>MONITOR_MS</code> and dispatch an event if the address has changed via the user.		 */		private function pollBrowserAddress() : void {			var previousPath : String = currentPath;			updateMonitor( );			if(previousPath != currentPath) {				dispatchEvent( new BrowserEvent( BrowserEvent.ADDRESS_CHANGE, currentPath, previousPath ) );				Logger.$.notice( this, "Detected Browser Address change [is: " + currentPath + " | was: " + previousPath + "]" );			}		}		/**		 * Whether the manager is currently monitoring the browser for address changes or not.		 */		public function get isMonitoring() : Boolean {			return _isMonitoring;		}		/**		 * The browser page title.		 */		public function get title() : String {			return BrowserAddress.title;		}		/*** @private */		public function set title(val : String) : void {			BrowserAddress.title = val;		}				/**		 * The browser anchor path.		 */		public function get path() : String {			return BrowserAddress.anchor;		}		/*** @private */		public function set path(val : String) : void {			BrowserAddress.anchor = val;			updateMonitor( );		}		/**		 * The browser anchor path as an array of paths.		 */		public function get pathArray() : Array {			var a : String = BrowserAddress.anchor;			return (!a) ? [] : a.split( "/" );		}		/*** @private */		public function set pathArray(val : Array) : void {			var str : String = '';			var slash : String = '';			for (var i : int = 0; i < val.length ; i++) {				slash = (i < val.length - 1) ? '/' : '';				str += val[i] + slash;			}			path = str;		}		/**		 * Push an item on to the pathArray.		 */		public function push(val : String) : void {			var a : Array = pathArray;			a.push( val );			pathArray = a;		}		/**		 * Remove the last item from the pathArray.		 */		public function pop() : void {			var a : Array = pathArray;			if(a.length > 0) a.pop( );			pathArray = a;		}				/**		 * Move forward in the browser history.		 */		public function forward() : void {			BrowserAddress.forward( );			updateMonitor( );				}		/**		 * Move back in the browser history.		 */		public function back() : void {			BrowserAddress.back( );			updateMonitor( );				}				}}/** * Internal class is accessible only to this AS file and is used  * as a constructor param to enforce proper Singleton behavior. */internal class SingletonEnforcer {}		