/** * sekati.text.TextEffect * @version 1.0.2 * @author jason m horwitz | sekati.com * Copyright (C) 2009  jason m horwitz, Sekat LLC. All Rights Reserved. * Released under the MIT License: http://www.opensource.org/licenses/mit-license.php */package sekati.text {	import sekati.events.FramePulse;	import sekati.math.MathBase;	import sekati.utils.StringUtil;	import sekati.utils.TypeEnforcer;	import flash.text.TextField;	import flash.utils.Dictionary;		/**	 * TextEffect	 */	public class TextEffect {		/**		 * Stores <code>TextField</code>'s currently having effects performed on them.		 */		private static var EFFECTS : Dictionary = new Dictionary( true );		/**		 * Add a effect to the <code>TextField</code> instance (removing any existing effects).		 * @param tf 			the <code>TextField</code> instance.		 * @param effectObj 	the effect object containing a 'handler' property.		 */		private static function addEffect(tf : TextField, effectObj : *) : void {			removeEffect( tf );			EFFECTS[tf] = effectObj;			FramePulse.$.addFrameListener( EFFECTS[tf].handler );		}				/**		 * Remove all effects from the <code>TextField</code> instance.		 */		private static function removeEffect(tf : TextField) : void {			if(EFFECTS[tf]) {				trace( "removing effect from " + tf );				FramePulse.$.removeFrameListener( EFFECTS[tf].handler );				EFFECTS[tf] = null;			}		}		/**		 * Returns the effect state of a <code>TextField</code> instance.		 */		public static function hasEffect(tf : TextField) : Boolean {			return !EFFECTS[tf];		}		// EFFECTS		/**		 * 		 */		public static function mixer(tf : TextField, str : String) : void {			var count : uint = 0;			var effect : Function = function():void {				if(count < 10) {					trace( "effect" );					count++;				} else {					trace( "bye!" );					removeEffect( tf );				}			};			var effectObj : Object = { handler:effect, str:str };			addEffect( tf, effectObj );		}		/**		 * Easing alpha type in text animation		 * @param tf 			the <code>TextField</code> instance.		 * @param str 			string to animate in		 * @param cb 			callback		 */		public static function atype(tf : TextField, str : String, cb : Function) : void {			tf.alpha = 0;			//tf.html = true;			var anim : Object = {};			anim.str = str;			anim.cursor = 0;			anim.cb = cb;			anim.dLen = StringUtil.stripTags( anim.str ).length;			//anim.dLen = anim.str.length;			anim.handler = function() : void {				if (anim.dLen > 30) {					anim.cursor += 16 + MathBase.random( 0, 16 );				} else if (anim.dLen > 20) {					anim.cursor += 3 + MathBase.random( 0, 4 );				} else {					anim.cursor += 1;				}								trace( "dlen: " + anim.dLen + " | cursor: " + anim.cursor );								tf.htmlText = anim.str.substr( 0, anim.cursor );				anim.dLen = StringUtil.stripTags( anim.str ).length - tf.text.length;				//anim.dLen = anim.str.length - tf.text.length;				tf.alpha = tf.text.length / anim.str.length;				trace( "alpha: " + tf.alpha );				if (anim.dLen <= 1) {					removeEffect( tf );					tf.htmlText = anim.str;					tf.alpha = 1;					anim.cb( );				}			};						addEffect( tf, anim );		}		/**		 * Count up any positive numeric value in a text field		 * @param tf		 * @param n		 * @param floatPrecision		 *  @param stepDivisor		 */			public static function counter(tf : TextField, startValue : Number, endValue : Number, floatPrecision : int = 2, stepDivisor : int = 20) : void {			var anim : Object = {};			anim.str = endValue.toString( );			anim.count = startValue;			anim.steps = (endValue / stepDivisor);			//			anim.handler = function():void {				if ((anim.count > endValue && startValue < endValue) || (anim.count < endValue && startValue > endValue)) {					removeEffect( tf );					tf.text = anim.str;				} else {										if(startValue < endValue) {						anim.count += anim.steps;					} else {						anim.count -= anim.steps;					}					var tmp : String = "";					for (var i : Number = 0; i < (anim.str.length - anim.count.toString( ).length) ; i++) tmp += "0";					anim.count = MathBase.sanitizeFloat( anim.count, floatPrecision );					tf.text = tmp + anim.count.toString( );				}			};			addEffect( tf, anim );		}		/**		 * TextEffect Static Constructor		 */		public function TextEffect() {			TypeEnforcer.enforceStatic( TextEffect );		}	}}