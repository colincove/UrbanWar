/** * sekati.validators.FileTypeValidator * @version 1.0.2 * @author jason m horwitz | sekati.com * Copyright (C) 2009  jason m horwitz, Sekat LLC. All Rights Reserved. * Released under the MIT License: http://www.opensource.org/licenses/mit-license.php */package sekati.validators {	import sekati.utils.TypeEnforcer;			/**	 * FileTypeValidator provides path validation of loadable file types & associated <code>ILoader</code>.	 */	public class FileTypeValidator {		protected static const IS_IMAGE : RegExp = /^.+\.((jpg)|(jpeg)|(gif)|(png))/i;		protected static const IS_SWF : RegExp = /^.+\.((swf))/i;		protected static const IS_XML : RegExp = /^.+\.((xml))/i;		protected static const IS_CSS : RegExp = /^.+\.((css))/i;		protected static const IS_AUDIO : RegExp = /^.+\.((mp3)|(mp4)|(wav)|(f4a)|(f4b)|(f4p))/i;		protected static const IS_VIDEO : RegExp = /^.+\.((mp4)|(flv)|(f4v)|(f4p)|(m4v))/i;		protected static const IS_TEXT : RegExp = /^.+\.((txt)|(php)|(html))/i;		protected static const IS_VARIABLES : RegExp = /^.+\.((vars)|(lv))/i;		protected static const IS_BIN : RegExp = /^.+\.((dae)|(zip)|(swc)|(bin))/i;		/**		 * Check if the passed in <code>path</code> has a image extension.		 */		public static function isImage(path : String) : Boolean {			return IS_IMAGE.test( path );		}		/**		 * Check if the passed in <code>path</code> has a SWF extension.		 */		public static function isSWF(path : String) : Boolean {			return IS_SWF.test( path );		}		/**		 * Check if the passed in <code>path</code> has a XML extension.		 */		public static function isXML(path : String) : Boolean {			return IS_XML.test( path );		}		/**		 * Check if the passed in <code>path</code> has a CSS extension.		 */		public static function isCSS(path : String) : Boolean {			return IS_CSS.test( path );		}		/**		 * Check if the passed in <code>path</code> has a audio extension.		 */		public static function isAudio(path : String) : Boolean {			return IS_AUDIO.test( path );		}		/**		 * Check if the passed in <code>path</code> has an video extension.		 */		public static function isVideo(path : String) : Boolean {			return IS_VIDEO.test( path );		}		/**		 * Check if the passed in <code>path</code> has an text extension.		 */		public static function isText(path : String) : Boolean {			return IS_TEXT.test( path );		}		/**		 * Check if the passed in <code>path</code> has a <code>LoadVariables</code> extension.		 */		public static function isVariables(path : String) : Boolean {			return IS_VARIABLES.test( path );		}			/**		 * Check if the passed in <code>path</code> has a binary extension.		 */		public static function isBinary(path : String) : Boolean {			return IS_BIN.test( path );		}		/**		 * FileTypeValidator Static Constructor		 */		public function FileTypeValidator() {			TypeEnforcer.enforceStatic( FileTypeValidator );		}	}}