/** * sekati.media.CameraDevice * @version 1.0.1 * @author jason m horwitz | sekati.com * Copyright (C) 2009  jason m horwitz, Sekat LLC. All Rights Reserved. * Released under the MIT License: http://www.opensource.org/licenses/mit-license.php */package sekati.media {	import sekati.display.CoreSprite;	import sekati.events.DeviceEvent;	import sekati.log.Logger;	import flash.events.ActivityEvent;	import flash.events.StatusEvent;	import flash.media.Camera;	import flash.media.Video;	import flash.system.Security;	import flash.system.SecurityPanel;			/**	 * CameraDevice provides a <code>Camera</code> control <code>DisplayObject</code> to the API.	 * @see sekati.events.DeviceEvent	 * @see http://livedocs.adobe.com/flash/9.0/ActionScriptLangRefV3/flash/media/Camera.html	 */	public class CameraDevice extends CoreSprite implements IDevice {		/*** @private */		protected var _device : Camera;		/*** @private */		protected var _video : Video;		/*** @private */		protected var _width : int;		/*** @private */		protected var _height : int;		/*** @private */		protected var _fps : int;		/*** @private */		protected var _motionLevel : int;		/*** @private */		protected var _timeout : int;		/*** @private */		protected var _bandwidth : int;		/*** @private */		protected var _quality : int;		/**		 * CameraDevice Constructor		 * @param width 		The requested capture width, in pixels.		 * @param height 		The requested capture width, in pixels.		 * @param motionLevel 	The amount of motion required to dispatch the <code>activity<code> event. Ranges from <code>0 - 100</code> (Flash Player defaults to <code>50</code>, however <code>25</code> is more accurate for body motion. Note: the lower the value the greater the bandwidth usage in a <code>NetStream</code>). 		 * @param fps 			The requested rate at which the camera should capture data, in frames per second.		 * @param timeout 		How many milliseconds must elapse without activity before a <code>activity</code> event is dispatched.		 * @param bandwidth 	The maximum amount of bandwidth the outgoing video feed can use, in bytes per second. To specify that Flash Player video can use as much bandwidth as needed to maintain the value of quality, pass <code>0</code> for bandwidth.		 * @param quality 		The picture quality, determined by the amount of compression applied to each video frame. Ranges from <code>1</code> (<i>lowest quality, max compression</i>) to <code>100</code> (<i>high quality, no compression</i>). For variable picture quality, adjusted as needed to avoid exceeding bandwidth, pass <code>0</code>.		 * @param autoPoll 		Determines whether the device is auto-polled for (<code>true</code>) or not (<code>false</code>). 		 */		public function CameraDevice(width : int = 320, height : int = 240, motionLevel : int = 50, fps : int = 15, timeout : int = 2000, bandwidth : int = 16384, quality : int = 0, autoPoll : Boolean = true) {			super( );			_width = width;			_height = height;			_fps = fps;			_motionLevel = motionLevel;			_timeout = timeout;			_bandwidth = bandwidth;			_quality = quality;			if(autoPoll) {				pollDevice( );			}		}		/**		 * @inheritDoc		 */		override public function destroy() : void {			_device.removeEventListener( StatusEvent.STATUS, statusHandler );			_device.removeEventListener( ActivityEvent.ACTIVITY, activityHandler );			try {				_video.clear( );				removeChild( _video );			} catch(e : Error) {			}			super.destroy( );		}		// DEVICE CONNECTORS				/**		 * Poll the <code>Camera</code> device for a connection.		 */		public function pollDevice() : void {			_device = Camera.getCamera( );			if(_device != null) {				dispatchEvent( new DeviceEvent( DeviceEvent.DEVICE_AVAILABLE ) );				connectDevice( );			} else {				if(devices.length > 0) {					dispatchEvent( new DeviceEvent( DeviceEvent.DEVICE_BUSY ) );					promptDevice( );				} else {					dispatchEvent( new DeviceEvent( DeviceEvent.DEVICE_UNAVAILABLE ) );				}			}		}		/**		 * Connect the <code>Camera</code> to a <code>Video</code> stream.		 */		protected function connectDevice() : void {			_device.addEventListener( StatusEvent.STATUS, statusHandler, false, 0, true );			_device.addEventListener( ActivityEvent.ACTIVITY, activityHandler, false, 0, true );			_device.setMode( _width, _height, _fps, true );			_device.setMotionLevel( _motionLevel, _timeout );			_video = new Video( _device.width, _device.height );			_video.attachCamera( _device );			addChild( _video );		}		/**		 * Graceful degradation: a <code>Camera</code> is available but the user either clicked <i>deny</i> or the device is busy.		 */		protected function promptDevice() : void {			Security.showSettings( SecurityPanel.CAMERA );		}		// EVENT HANDLERS		/**		 * Responds to camera activity.		 */		protected function activityHandler(e : ActivityEvent) : void {			//Logger.$.notice( this, "activating: " + e.activating + ", activityLevel: " + _device.activityLevel );			dispatchEvent( new DeviceEvent( DeviceEvent.DEVICE_ACTIVITY, e.activating, _device.activityLevel ) );		}		/**		 * Respond to camera status.		 */		protected function statusHandler(e : StatusEvent) : void {			//Logger.$.notice( this, "status: " + e.code );			switch (e.code) {				case "Camera.Muted":					// user clicked deny					Logger.$.warn( this, "Camera device muted." );					dispatchEvent( new DeviceEvent( DeviceEvent.DEVICE_MUTE ) );					break;				case "Camera.Unmuted":					// user clicked accept					Logger.$.notice( this, "Camera device unmuted." );					dispatchEvent( new DeviceEvent( DeviceEvent.DEVICE_UNMUTE ) );					break;			}		}				// GETTABLE DEVICE PROPERTIES		/**		 * The list of names of the available <code>Camera</code> device drivers.		 */		public function get devices() : Array {			return Camera.names;		}		/**		 * The <i>index</i> of the currently connected <code>Camera</code> device driver.		 */		public function get deviceIndex() : int {			return _device.index;		}		/**		 * The <i>name</i> of the currently connected <code>Camera</code> device driver.		 */		public function get deviceName() : String {			return _device.name;		}		/**		 * The amount of activity the device is detecting. Ranges from <code>0</code> (no activity 		 * detected) to <code>100</code> (a large amount of activity detected).		 */		public function get activityLevel() : Number {			return _device.activityLevel;		}		/**		 * Indicates whether the user has denied access to the device (<code>true</code>) or allowed 		 * access (<code>false</code>) in the Flash Player Privacy dialog box.		 */		public function get muted() : Boolean {			return _device.muted;		}		/**		 * The rate at which the camera is capturing data, in frames per second. 		 */		public function get currentFPS() : Number {			return _device.currentFPS;		}				// SETTABLE DEVICE PROPERTIES		/**		 * The devices current Frames Per Second.		 */		public function get fps() : int {			return _device.fps;		}		/*** @private */		public function set fps(fps : int) : void {			_fps = fps;			_device.setMode( _width, _height, _fps, true );		}		/**		 * Indicates whether a local view of what the camera is capturing is compressed and decompressed (<code>true</code>), 		 * as it would be for live transmission using <i>Flash Media Server</i>, or uncompressed (<code>false</code>).		 */		public function get loopback() : Boolean {			return _device.loopback;		}		/*** @private */		public function set loopback(compress : Boolean) : void {			_device.setLoopback( compress );		}		/**		 * The amount of motion required to invoke the <code>activity</code> event.		 */		public function get motionLevel() : int {			return _device.motionLevel;		}		/*** @private */		public function set motionLevel(level : int) : void {			_motionLevel = level;			_device.setMotionLevel( _motionLevel, _timeout );		}		/**		 * The number of milliseconds which must elapse without activity to invoke the <code>activity</code> event.		 */		public function get timeout() : int {			return _timeout;		}		/*** @private */		public function set timeout(timeout : int) : void {			_timeout = timeout;			_device.setMotionLevel( _motionLevel, _timeout );		}		/**		 * he maximum amount of bandwidth the outgoing video feed can use, in bytes per second. To specify that Flash Player video 		 * can use as much bandwidth as needed to maintain the value of quality, pass <code>0</code> for bandwidth.		 */		public function get bandwidth() : int {			return _bandwidth;		}		/*** @private */		public function set bandwidth(bandwidth : int) : void {			_bandwidth = bandwidth;			_device.setQuality( _bandwidth, _quality );		}		/**		 * The picture quality, determined by the amount of compression applied to each video frame. Ranges from <code>1</code> 		 * (<i>lowest quality, max compression</i>) to <code>100</code> (<i>high quality, no compression</i>). For variable picture 		 * quality, adjusted as needed to avoid exceeding bandwidth, pass <code>0</code>. 		 */		public function get quality() : int {			return _quality;		}		/*** @private */		public function set quality(quality : int) : void {			_quality = quality;			_device.setQuality( _bandwidth, _quality );		}		/**		 * The <code>Video</code> output <code>width</code> (note this is different than the <code>CameraDevice.width</code>).		 */		public function get videoWidth() : int {			return _width;		}		/*** @private */		public function set videoWidth(width : int) : void {			_width = width;			_device.setMode( _width, _height, _fps, true );		}		/**		 * The <code>Video</code> output <code>height</code> (note this is different than the <code>CameraDevice.height</code>).		 */		public function get videoHeight() : int {			return _height;		}		/*** @private */		public function set videoHeight(height : int) : void {			_height = height;			_device.setMode( _width, _height, _fps, true );		}		//  DEVICE GETTERS		/**		 * The attached camera driver's <code>Video</code> instance.		 */		public function get video() : Video {			return _video;		}		/**		 * The attached camera driver instance.		 */		public function get camera() : Camera {			return _device;		}			}}