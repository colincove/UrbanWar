/** * sekati.display.DraggableSprite * @version 1.0.3 * @author jason m horwitz | sekati.com * Copyright (C) 2008  jason m horwitz, Sekat LLC. All Rights Reserved. * Released under the MIT License: http://www.opensource.org/licenses/mit-license.php */package sekati.display {	import sekati.display.Canvas;	import sekati.display.InteractiveSprite;	import sekati.events.FramePulse;	import flash.events.Event;	import flash.events.MouseEvent;	import flash.geom.Rectangle;		/**	 * DraggableSprite provides a common API construct for drag, drop & throwable sprite objects.	 */	public class DraggableSprite extends InteractiveSprite {		protected var friction : Number;		protected var ratio : Number;		protected var isThrowable : Boolean;		protected var isDrag : Boolean;		protected var cx : Number;		protected var cy : Number;		protected var tx : Number;		protected var ty : Number;		protected var xSpeed : Number;		protected var ySpeed : Number;			protected var boundRect : Rectangle;						/**		 * DraggableSprite Constructor		 * @param bounds 		in which the sprite may be dragged or thrown (best when zero-zero positioned in its container).		 * @param isThrowable 	determines whether the clip has throwable physics.		 * @param friction 		of the throwable physics.		 * @param ratio 		of the throwable physics.		 */		public function DraggableSprite(bounds : Rectangle = null, isThrowable : Boolean = true, friction : Number = 0.7, ratio : Number = 1.5) {			super( );			if(bounds) {				this.bounds = bounds;				// constrain within bounds if the default position has overflow				if (x + width >= boundRight || x <= boundLeft) x = boundLeft;				if (y + height >= boundBottom || y <= boundTop) y = boundTop;			}			this.isThrowable = isThrowable;			this.friction = friction;			this.ratio = ratio;			xSpeed = 0;			ySpeed = 0;		}		/**		 * @inheritDoc		 */		override protected function configListeners(isAdd : Boolean = false) : void {			super.configListeners( isAdd );			if(isThrowable) {				var listenerMethod : String = (isAdd) ? 'addFrameListener' : 'removeFrameListener';				FramePulse.$[listenerMethod]( frameHandler );			}		}		/**		 * @inheritDoc		 */		override protected function press(e : MouseEvent = null) : void {			super.press( e );			isDrag = true;			this.parent.setChildIndex( this, this.parent.numChildren - 1 );			startDrag( false, new Rectangle( bounds.x, bounds.y, (bounds.width - width), (bounds.height - height) ) );		}		/**		 * @inheritDoc		 */		override protected function release(e : MouseEvent = null) : void {			super.release( e );			stopDrag( );			isDrag = false;			xSpeed = (tx - cx) * ratio;			ySpeed = (ty - cy) * ratio;			//if(dropTarget) trace( "DropTarget: " + dropTarget.name );		}		/**		 * @inheritDoc		 */		override protected function releaseOutside(e : Event = null) : void {			release( );		}		/**		 * Handle throw logic.		 */		protected function frameHandler(e : Event = null) : void {			if (!isDrag) {				cx = x;				cy = y;				tx = cx + xSpeed;				ty = cy + ySpeed;				xSpeed *= friction;				ySpeed *= friction;				if (tx >= boundRight || tx <= boundLeft) {					xSpeed *= -friction;					tx = cx;				}				if (ty >= boundBottom || ty <= boundTop) {					ySpeed *= -friction;					ty = cy;				}				x = Math.round( tx );				y = Math.round( ty );			} else {				cx = tx;				cy = ty;				tx = x;				ty = y;			}			if (xSpeed < 0.1 && xSpeed > -0.1) xSpeed = 0;			if (ySpeed < 0.1 && ySpeed > -0.1) ySpeed = 0;					}		/**		 * Rectangle value relative to the coordinates of the Sprite's parent that specify a constraint area for the DraggableSprite.		 * <p>If <code>bounds</code> has not been set the <code>Canvas.stage</code> bounds are automatically implemented instead.</p>		 */		public function get bounds() : Rectangle {			return (boundRect != null) ? boundRect : new Rectangle( 0, 0, Canvas.stage.stageWidth, Canvas.stage.stageHeight );		}		/**		 * @private		 */		public function set bounds(r : Rectangle) : void {			boundRect = r;		}		/**		 * Left bounds (<code>DisplayObject</code> registration <code>0,0</code>).		 */		public function get boundLeft() : Number {			return bounds.x;		}		/**		 * Right bounds (<code>DisplayObject</code> registration <code>0,0</code>).		 */		public function get boundRight() : Number {			return bounds.width - width;		}		/**		 * Top bounds (<code>DisplayObject</code> registration <code>0,0</code>).		 */		public function get boundTop() : Number {			return bounds.y;		}		/**		 * Bottom bounds (<code>DisplayObject</code> registration <code>0,0</code>).		 */		public function get boundBottom() : Number {			return bounds.height - height;		}		/**		 * @inheritDoc		 */		override public function set enabled(b : Boolean) : void {			super.enabled = b;			if(!enabled && isDrag) {				release( ); 			}		}	}}