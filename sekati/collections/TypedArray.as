/** * sekati.collections.TypedArray * @version 1.0.1 * @author jason m horwitz | sekati.com * Copyright (C) 2008  jason m horwitz, Sekat LLC. All Rights Reserved. * Released under the MIT License: http://www.opensource.org/licenses/mit-license.php */package sekati.collections {	import sekati.log.Logger;				/**	 * TypedArray provides strict data-typed array object to the API. This means any type-mismatched element (<i>e.g. elements 	 * not matching <code>dataType</code> as defined in the constructor</i>) added to the array will be automatically removed & a	 * <code>Logger</code> warning will be placed if logging is enabled).  	 * 	 * <p><b>Warning:</b> You cannot use the array access (<code>[]</code>) operator to initialize a TypedArray but you may use 	 * it to access elements of an instantiated TypedArray.</p>	 * 	 * <p><b>Note:</b> This class assumes that the compiler option <code>-as3</code> is set to <code>true</code> & the compiler 	 * option <code>-es</code> is set to <code>false</code>.</p>	 * 	 * @see http://livedocs.adobe.com/flex/3/html/help.html?content=10_Lists_of_data_7.html	 */	public dynamic class TypedArray extends Array {		/*** @private */		protected var _dataType : Class;		/**		 * TypedArray Constructor create an array containing only strict data-typed elements of <code>dataType</code>.		 * @param dataType 	of <code>Class</code> all array element values will be typed.		 * @param args 		array element values.		 */		public function TypedArray(dataType : Class, ...args) {			_dataType = dataType;			var n : uint = args.length;			if (n == 1 && (args[0] is Number)) {				var dlen : Number = args[0];				var ulen : uint = dlen;				if (ulen != dlen) {					throw new RangeError( "Array index is not a 32-bit unsigned integer (" + dlen + ")" );				}				length = ulen;			} else {				for (var i : int = 0; i < n ; i++) {					// type check done in push() 					this.push( args[i] );				}				length = this.length;			}					}		/**		 * @inheritDoc		 */		override AS3 function concat(...args) : Array {			var passArgs : TypedArray = new TypedArray( dataType );			for (var i:* in args) {				// type check done in push()				passArgs.push( args[i] );			}			return (super.concat.apply( this, passArgs ));		}		/**		 * @inheritDoc		 */		override AS3 function push(...args) : uint {			var dirty : Array = new Array( );			for (var i:* in args) {				if (!(args[i] is dataType)) {					Logger.$.warn( this, "Removing TypeArray element mismatch: '" + args[i] + "' is not " + dataType + '!' );						//args.splice( i, 1 );					dirty.push( i );				}			}			// splice out our array of "dirty" values before making the push ...			for (var j : int = 0; j < dirty.length ; j++) {				args.splice( dirty[j], 1 );			}			return (super.push.apply( this, args ));		}		/**		 * @inheritDoc		 */		override AS3 function splice(...args) : * {			if (args.length > 2) {				var dirty : Array = new Array( );				for (var i : int = 2; i < args.length ; i++) {					if (!(args[i] is dataType)) {						//args.splice( i, 1 );						dirty.push( i );					}				}				// splice out our array of "dirty" values before making the splice ...				for (var j : int = 0; j < dirty.length ; j++) {					args.splice( dirty[j], 1 );				}							}			return (super.splice.apply( this, args ));		}		/**		 * @inheritDoc		 */		override AS3 function unshift(...args) : uint {			var dirty : Array = new Array( );			for (var i:* in args) {				if (!(args[i] is dataType)) {					//args.splice( i, 1 );					dirty.push( i );				}			}			// splice out our array of "dirty" values before making the unshift ...			for (var j : int = 0; j < dirty.length ; j++) {				args.splice( dirty[j], 1 );			}							return (super.unshift.apply( this, args ));		}		/**		 * The <code>Class</code> data type of all TypeArray elements.		 */		public function get dataType() : Class {			return _dataType;		}			}}