/** * sekati.load.ByteArrayLoader * @version 1.0.0 * @author jason m horwitz | sekati.com * Copyright (C) 2008  jason m horwitz, Sekat LLC. All Rights Reserved. * Released under the MIT License: http://www.opensource.org/licenses/mit-license.php */package sekati.load {	import sekati.load.AbstractLoader;	import sekati.load.ILoader;	import flash.events.Event;	import flash.net.URLLoader;	import flash.net.URLLoaderDataFormat;	import flash.utils.ByteArray;		/**	 * ByteArrayLoader provides a standard API loader for loading a files binary <code>ByteArray</code> content.	 * 	 * @example <listing version="3.0">	 * var loader : ByteArrayLoader = new ByteArrayLoader( "http://localhost/path/to/my.bin" );	 * loader.addEventListener( Event.INIT, readBytes );	 * loader.load( );	 * 	 * private function readBytes(e : Event) : void {	 * 		loader.removeEventListener( Event.INIT, readBytes );	 * 		trace( "ByteArray contents: " + loader.content );	 * }	 * </listing>	 */	public class ByteArrayLoader extends AbstractLoader implements ILoader {		private var bytes : ByteArray;		/**		 * ByteArrayLoader Constructor		 * @param url 	of the Binary file.		 */		public function ByteArrayLoader(url : String) {			super( URLLoader, url );			dataFormat = URLLoaderDataFormat.BINARY;		}		/**		 * @inheritDoc		 */		override protected function initHandler(e : Event) : void {			super.initHandler( e );			bytes = new ByteArray( );			bytes = rawContent;		}		/**		 * The <i>strictly-typed</i> binary <code>ByteArray</code> loader content.		 */		public function get content() : ByteArray {			return bytes;		}			}}